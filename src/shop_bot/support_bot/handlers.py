import logging
from aiogram import Bot, Router, F, types, html
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ChatMemberStatus
from aiogram.exceptions import TelegramBadRequest

from shop_bot.data_manager.remnawave_repository import (
    get_setting,
    create_support_ticket,
    add_support_message,
    get_user_tickets,
    get_ticket,
    get_ticket_messages,
    set_ticket_status,
    update_ticket_thread_info,
    get_ticket_by_thread,
    update_ticket_subject,
    delete_ticket,
    is_admin,
    get_admin_ids,
)

logger = logging.getLogger(__name__)

class SupportDialog(StatesGroup):
    waiting_for_subject = State()
    waiting_for_message = State()
    waiting_for_reply = State()


class AdminDialog(StatesGroup):
    waiting_for_note = State()


def get_support_router() -> Router:
    router = Router()

    def _user_main_reply_kb() -> types.ReplyKeyboardMarkup:
        return types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="‚úçÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")],
                [types.KeyboardButton(text="üì® –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")],
            ],
            resize_keyboard=True
        )

    def _get_latest_open_ticket(user_id: int) -> dict | None:
        try:
            tickets = get_user_tickets(user_id) or []
            open_tickets = [t for t in tickets if t.get('status') == 'open']
            if not open_tickets:
                return None
            return max(open_tickets, key=lambda t: int(t['ticket_id']))
        except Exception:
            return None

    def _admin_actions_kb(ticket_id: int) -> types.InlineKeyboardMarkup:
        try:
            t = get_ticket(ticket_id)
            status = (t and t.get('status')) or 'open'
        except Exception:
            status = 'open'
        first_row: list[types.InlineKeyboardButton] = []
        if status == 'open':
            first_row.append(types.InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"admin_close_{ticket_id}"))
        else:
            first_row.append(types.InlineKeyboardButton(text="üîì –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å", callback_data=f"admin_reopen_{ticket_id}"))
        inline_kb = [
            first_row,
            [types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_{ticket_id}")],
            [
                types.InlineKeyboardButton(text="‚≠ê –í–∞–∂–Ω–æ", callback_data=f"admin_star_{ticket_id}"),
                types.InlineKeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data=f"admin_user_{ticket_id}"),
                types.InlineKeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∞", callback_data=f"admin_note_{ticket_id}"),
            ],
            [types.InlineKeyboardButton(text="üóí –ó–∞–º–µ—Ç–∫–∏", callback_data=f"admin_notes_{ticket_id}")],
        ]
        return types.InlineKeyboardMarkup(inline_keyboard=inline_kb)

    async def _is_admin(bot: Bot, chat_id: int, user_id: int) -> bool:
        is_admin_by_setting = is_admin(user_id)
        is_admin_in_chat = False
        try:
            member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            is_admin_in_chat = member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
        except Exception:
            pass
        return bool(is_admin_by_setting or is_admin_in_chat)

    @router.message(CommandStart(), F.chat.type == "private")
    async def start_handler(message: types.Message, state: FSMContext, bot: Bot):
        args = (message.text or "").split(maxsplit=1)
        arg = None
        if len(args) > 1:
            arg = args[1].strip()
        if arg == "new":
            existing = _get_latest_open_ticket(message.from_user.id)
            if existing:
                await message.answer(
                    f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç #{existing['ticket_id']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ. –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è."
                )
            else:
                await message.answer("üìù –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º')")
                await state.set_state(SupportDialog.waiting_for_subject)
            return
        support_text = get_setting("support_text") or "–†–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ."
        await message.answer(
            support_text,
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="‚úçÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ")],
                    [types.KeyboardButton(text="üì® –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")],
                ],
                resize_keyboard=True
            ),
        )

    @router.callback_query(F.data == "support_new_ticket")
    async def support_new_ticket_handler(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer()
        existing = _get_latest_open_ticket(callback.from_user.id)
        if existing:
            await callback.message.edit_text(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç #{existing['ticket_id']}. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ –Ω—ë–º. –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ."
            )
        else:
            await callback.message.edit_text("üìù –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º')")
            await state.set_state(SupportDialog.waiting_for_subject)

    @router.message(SupportDialog.waiting_for_subject, F.chat.type == "private")
    async def support_subject_received(message: types.Message, state: FSMContext):
        subject = (message.text or "").strip()
        await state.update_data(subject=subject)
        await message.answer("‚úâÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        await state.set_state(SupportDialog.waiting_for_message)

    @router.message(SupportDialog.waiting_for_message, F.chat.type == "private")
    async def support_message_received(message: types.Message, state: FSMContext, bot: Bot):
        user_id = message.from_user.id
        data = await state.get_data()
        raw_subject = (data.get("subject") or "").strip()
        subject = raw_subject if raw_subject else "–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã"
        existing = _get_latest_open_ticket(user_id)
        created_new = False
        if existing:
            ticket_id = int(existing['ticket_id'])
            add_support_message(ticket_id, sender="user", content=(message.text or message.caption or ""))
            ticket = get_ticket(ticket_id)
        else:
            ticket_id = create_support_ticket(user_id, subject)
            if not ticket_id:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                return
            add_support_message(ticket_id, sender="user", content=(message.text or message.caption or ""))
            ticket = get_ticket(ticket_id)
            created_new = True
        support_forum_chat_id = get_setting("support_forum_chat_id")
        thread_id = None
        if support_forum_chat_id and not (ticket and ticket.get('message_thread_id')):
            try:
                chat_id = int(support_forum_chat_id)
                author_tag = (
                    (message.from_user.username and f"@{message.from_user.username}")
                    or (message.from_user.full_name if message.from_user else None)
                    or str(user_id)
                )
                subj_full = (subject or '–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã')
                is_star = subj_full.strip().startswith('‚≠ê')
                display_subj = (subj_full.lstrip('‚≠êÔ∏è ').strip() if is_star else subj_full)
                trimmed_subject = display_subj[:40]
                important_prefix = 'üî¥ –í–∞–∂–Ω–æ: ' if is_star else ''
                topic_name = f"#{ticket_id} {important_prefix}{trimmed_subject} ‚Ä¢ –æ—Ç {author_tag}"
                forum_topic = await bot.create_forum_topic(chat_id=chat_id, name=topic_name)
                thread_id = forum_topic.message_thread_id
                update_ticket_thread_info(ticket_id, str(chat_id), int(thread_id))
                subj_display = (subject or '‚Äî')
                header = (
                    "üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
                    f"–¢–∏–∫–µ—Ç: #{ticket_id}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name} (ID: {user_id})\n"
                    f"–¢–µ–º–∞: {subj_display} ‚Äî –æ—Ç @{message.from_user.username or message.from_user.full_name} (ID: {user_id})\n\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text or ''}"
                )
                await bot.send_message(chat_id=chat_id, text=header, message_thread_id=thread_id, reply_markup=_admin_actions_kb(ticket_id))
            except Exception as e:
                logger.warning(f"Failed to create forum topic or send message for ticket {ticket_id}: {e}")
        try:
            ticket = get_ticket(ticket_id)
            forum_chat_id = ticket and ticket.get('forum_chat_id')
            thread_id = ticket and ticket.get('message_thread_id')
            if forum_chat_id and thread_id:
                username = (message.from_user.username and f"@{message.from_user.username}") or message.from_user.full_name or str(message.from_user.id)
                await bot.send_message(
                    chat_id=int(forum_chat_id),
                    text=(
                        f"üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {username} (ID: {message.from_user.id}) –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}:" if created_new
                        else f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id} –æ—Ç {username} (ID: {message.from_user.id}):"
                    ),
                    message_thread_id=int(thread_id)
                )
                await bot.copy_message(
                    chat_id=int(forum_chat_id),
                    from_chat_id=message.chat.id,
                    message_id=message.message_id,
                    message_thread_id=int(thread_id)
                )
        except Exception as e:
            logger.warning(f"Failed to mirror user message to forum: {e}")
        await state.clear()
        if created_new:
            await message.answer(
                f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: #{ticket_id}. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
                reply_markup=_user_main_reply_kb()
            )
        else:
            await message.answer(
                f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç #{ticket_id}.",
                reply_markup=_user_main_reply_kb()
            )
        # –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            for aid in get_admin_ids():
                try:
                    await bot.send_message(
                        int(aid),
                        (
                            "üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
                            f"ID —Ç–∏–∫–µ—Ç–∞: #{ticket_id}\n"
                            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or message.from_user.full_name} (ID: {user_id})\n"
                            f"–¢–µ–º–∞: {subject or '‚Äî'}\n\n"
                            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text or ''}"
                        )
                    )
                except Exception:
                    pass
        except Exception as e:
            logger.warning(f"Failed to notify admins about ticket {ticket_id}: {e}")

    @router.callback_query(F.data == "support_my_tickets")
    async def support_my_tickets_handler(callback: types.CallbackQuery):
        await callback.answer()
        tickets = get_user_tickets(callback.from_user.id)
        text = "–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:" if tickets else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π."
        rows = []
        if tickets:
            for t in tickets:
                status_text = "üü¢ –û—Ç–∫—Ä—ã—Ç" if t.get('status') == 'open' else "üîí –ó–∞–∫—Ä—ã—Ç"
                is_star = (t.get('subject') or '').startswith('‚≠ê ')
                star = '‚≠ê ' if is_star else ''
                title = f"{star}#{t['ticket_id']} ‚Ä¢ {status_text}"
                if t.get('subject'):
                    title += f" ‚Ä¢ {t['subject'][:20]}"
                rows.append([types.InlineKeyboardButton(text=title, callback_data=f"support_view_{t['ticket_id']}")])
        await callback.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows))

    @router.callback_query(F.data.startswith("support_view_"))
    async def support_view_ticket_handler(callback: types.CallbackQuery):
        await callback.answer()
        ticket_id = int(callback.data.split("_")[-1])
        ticket = get_ticket(ticket_id)
        if not ticket or ticket.get('user_id') != callback.from_user.id:
            await callback.message.edit_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        messages = get_ticket_messages(ticket_id)
        human_status = "üü¢ –û—Ç–∫—Ä—ã—Ç" if ticket.get('status') == 'open' else "üîí –ó–∞–∫—Ä—ã—Ç"
        is_star = (ticket.get('subject') or '').startswith('‚≠ê ')
        star_line = "‚≠ê –í–∞–∂–Ω–æ" if is_star else "‚Äî"
        parts = [
            f"üßæ –¢–∏–∫–µ—Ç #{ticket_id} ‚Äî —Å—Ç–∞—Ç—É—Å: {human_status}",
            f"–¢–µ–º–∞: {ticket.get('subject') or '‚Äî'}",
            f"–í–∞–∂–Ω–æ—Å—Ç—å: {star_line}",
            ""
        ]
        for m in messages:
            if m.get('sender') == 'note':
                continue
            who = "–í—ã" if m.get('sender') == 'user' else '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'
            created = m.get('created_at')
            parts.append(f"{who} ({created}):\n{m.get('content','')}\n")
        final_text = "\n".join(parts)
        is_open = (ticket.get('status') == 'open')
        buttons = []
        if is_open:
            buttons.append([types.InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support_reply_{ticket_id}")])
            buttons.append([types.InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"support_close_{ticket_id}")])
        buttons.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="support_my_tickets")])
        await callback.message.edit_text(final_text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons))

    @router.callback_query(F.data.startswith("support_reply_"))
    async def support_reply_prompt_handler(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer()
        ticket_id = int(callback.data.split("_")[-1])
        ticket = get_ticket(ticket_id)
        if not ticket or ticket.get('user_id') != callback.from_user.id or ticket.get('status') != 'open':
            await callback.message.edit_text("–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç.")
            return
        await state.update_data(reply_ticket_id=ticket_id)
        await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        await state.set_state(SupportDialog.waiting_for_reply)

    @router.message(SupportDialog.waiting_for_reply, F.chat.type == "private")
    async def support_reply_received(message: types.Message, state: FSMContext, bot: Bot):
        data = await state.get_data()
        ticket_id = data.get('reply_ticket_id')
        ticket = get_ticket(ticket_id)
        if not ticket or ticket.get('user_id') != message.from_user.id or ticket.get('status') != 'open':
            await message.answer("–ù–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç.")
            await state.clear()
            return
        add_support_message(ticket_id, sender='user', content=(message.text or message.caption or ''))
        await state.clear()
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        try:
            forum_chat_id = ticket.get('forum_chat_id')
            thread_id = ticket.get('message_thread_id')
            if not (forum_chat_id and thread_id):
                support_forum_chat_id = get_setting("support_forum_chat_id")
                if support_forum_chat_id:
                    try:
                        chat_id = int(support_forum_chat_id)
                        subj_full = (ticket.get('subject') or '–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã')
                        is_star = subj_full.strip().startswith('‚≠ê')
                        display_subj = (subj_full.lstrip('‚≠êÔ∏è ').strip() if is_star else subj_full)
                        trimmed_subject = display_subj[:40]
                        author_tag = (
                            (message.from_user.username and f"@{message.from_user.username}")
                            or (message.from_user.full_name if message.from_user else None)
                            or str(message.from_user.id)
                        )
                        important_prefix = 'üî¥ –í–∞–∂–Ω–æ: ' if is_star else ''
                        topic_name = f"#{ticket_id} {important_prefix}{trimmed_subject} ‚Ä¢ –æ—Ç {author_tag}"
                        forum_topic = await bot.create_forum_topic(chat_id=chat_id, name=topic_name)
                        thread_id = forum_topic.message_thread_id
                        forum_chat_id = chat_id
                        update_ticket_thread_info(ticket_id, str(chat_id), int(thread_id))
                        subj_display = (ticket.get('subject') or '‚Äî')
                        header = (
                            "üìå –¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                            f"–¢–∏–∫–µ—Ç: #{ticket_id}\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {ticket.get('user_id')}\n"
                            f"–¢–µ–º–∞: {subj_display} ‚Äî –æ—Ç ID {ticket.get('user_id')}"
                        )
                        await bot.send_message(chat_id=chat_id, text=header, message_thread_id=thread_id, reply_markup=_admin_actions_kb(ticket_id))
                    except Exception as e:
                        logger.warning(f"Failed to auto-create forum topic for ticket {ticket_id}: {e}")
            if forum_chat_id and thread_id:
                try:
                    subj_full = (ticket.get('subject') or '–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã')
                    is_star = subj_full.strip().startswith('‚≠ê')
                    display_subj = (subj_full.lstrip('‚≠êÔ∏è ').strip() if is_star else subj_full)
                    trimmed = display_subj[:40]
                    author_tag = (
                        (message.from_user.username and f"@{message.from_user.username}")
                        or (message.from_user.full_name if message.from_user else None)
                        or str(message.from_user.id)
                    )
                    important_prefix = 'üî¥ –í–∞–∂–Ω–æ: ' if is_star else ''
                    topic_name = f"#{ticket_id} {important_prefix}{trimmed} ‚Ä¢ –æ—Ç {author_tag}"
                    await bot.edit_forum_topic(chat_id=int(forum_chat_id), message_thread_id=int(thread_id), name=topic_name)
                except Exception as e:
                    logger.warning(f"Failed to rename existing topic for ticket {ticket_id}: {e}")
                username = (message.from_user.username and f"@{message.from_user.username}") or message.from_user.full_name or str(message.from_user.id)
                await bot.send_message(
                    chat_id=int(forum_chat_id),
                    text=f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id} –æ—Ç {username} (ID: {message.from_user.id}):",
                    message_thread_id=int(thread_id)
                )
                await bot.copy_message(chat_id=int(forum_chat_id), from_chat_id=message.chat.id, message_id=message.message_id, message_thread_id=int(thread_id))
        except Exception as e:
            logger.warning(f"Failed to mirror user reply to forum: {e}")
        admin_id = get_setting("admin_telegram_id")
        if admin_id:
            try:
                await bot.send_message(
                    int(admin_id),
                    (
                        "üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ\n"
                        f"ID —Ç–∏–∫–µ—Ç–∞: #{ticket_id}\n"
                        f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username or message.from_user.full_name} (ID: {message.from_user.id})\n\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text or ''}"
                    )
                )
            except Exception as e:
                logger.warning(f"Failed to notify admin about ticket message #{ticket_id}: {e}")

    @router.message(F.is_topic_message == True)
    async def forum_thread_message_handler(message: types.Message, bot: Bot, state: FSMContext):
        try:
            if not message.message_thread_id:
                return
            forum_chat_id = message.chat.id
            thread_id = message.message_thread_id
            ticket = get_ticket_by_thread(str(forum_chat_id), int(thread_id))
            if not ticket:
                return
            user_id = int(ticket.get('user_id'))
            try:
                current_state = await state.get_state()
                if current_state == AdminDialog.waiting_for_note.state:
                    note_body = (message.text or message.caption or '').strip()
                    author_id = message.from_user.id if message.from_user else None
                    if author_id:
                        username = None
                        if message.from_user.username:
                            username = f"@{message.from_user.username}"
                        else:
                            username = message.from_user.full_name or str(author_id)
                        note_text = f"[–ó–∞–º–µ—Ç–∫–∞ –æ—Ç {username} (ID: {author_id})]\n{note_body}"
                    else:
                        note_text = note_body
                    add_support_message(int(ticket['ticket_id']), sender='note', content=note_text)
                    await message.answer("üìù –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                    await state.clear()
                    return
            except Exception:
                pass
            me = await bot.get_me()
            if message.from_user and message.from_user.id == me.id:
                return
            # –º–Ω–æ–≥–æ–∞–¥–º–∏–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            is_admin_by_setting = is_admin(message.from_user.id)
            is_admin_in_chat = False
            try:
                member = await bot.get_chat_member(chat_id=forum_chat_id, user_id=message.from_user.id)
                is_admin_in_chat = member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
            except Exception:
                pass
            if not (is_admin_by_setting or is_admin_in_chat):
                return
            content = (message.text or message.caption or "").strip()
            if content:
                add_support_message(ticket_id=int(ticket['ticket_id']), sender='admin', content=content)
            admin_name = (message.from_user and (message.from_user.username and f"@{message.from_user.username}")) or (message.from_user.full_name if message.from_user else "–ê–¥–º–∏–Ω")
            header = await bot.send_message(
                chat_id=user_id,
                text=f"üí¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket['ticket_id']} –æ—Ç {admin_name}"
            )
            try:
                await bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_to_message_id=header.message_id
                )
            except Exception:
                if content:
                    await bot.send_message(chat_id=user_id, text=content)
        except Exception as e:
            logger.warning(f"Failed to relay forum thread message: {e}")

    @router.callback_query(F.data.startswith("support_close_"))
    async def support_close_ticket_handler(callback: types.CallbackQuery, bot: Bot):
        await callback.answer()
        ticket_id = int(callback.data.split("_")[-1])
        ticket = get_ticket(ticket_id)
        if not ticket or ticket.get('user_id') != callback.from_user.id:
            await callback.message.edit_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        if ticket.get('status') == 'closed':
            await callback.message.edit_text("–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
            return
        ok = set_ticket_status(ticket_id, 'closed')
        if ok:
            try:
                forum_chat_id = ticket.get('forum_chat_id')
                thread_id = ticket.get('message_thread_id')
                if forum_chat_id and thread_id:
                    try:
                        username = (callback.from_user.username and f"@{callback.from_user.username}") or callback.from_user.full_name or str(callback.from_user.id)
                        await bot.send_message(
                            chat_id=int(forum_chat_id),
                            text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç #{ticket_id}.",
                            message_thread_id=int(thread_id)
                        )
                        await bot.send_message(
                            chat_id=int(forum_chat_id),
                            text="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–º:",
                            message_thread_id=int(thread_id),
                            reply_markup=_admin_actions_kb(ticket_id)
                        )
                    except Exception:
                        pass
                await bot.close_forum_topic(chat_id=int(forum_chat_id), message_thread_id=int(thread_id))
            except Exception as e:
                logger.warning(f"Failed to close forum topic for ticket {ticket_id} from bot: {e}")
            await callback.message.edit_text("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="support_my_tickets")]]))
            try:
                await callback.message.answer("–ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=_user_main_reply_kb())
            except Exception:
                pass
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.")

    @router.callback_query(F.data.startswith("admin_close_"))
    async def admin_close_ticket(callback: types.CallbackQuery, bot: Bot):
        await callback.answer()
        try:
            ticket_id = int(callback.data.split("_")[-1])
        except Exception:
            return
        ticket = get_ticket(ticket_id)
        if not ticket:
            await callback.message.edit_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        forum_chat_id = int(ticket.get('forum_chat_id') or callback.message.chat.id)
        if not await _is_admin(bot, forum_chat_id, callback.from_user.id):
            return
        if set_ticket_status(ticket_id, 'closed'):
            try:
                thread_id = ticket.get('message_thread_id')
                if thread_id:
                    await bot.close_forum_topic(chat_id=forum_chat_id, message_thread_id=int(thread_id))
            except Exception:
                pass
            try:
                await callback.message.edit_text(
                    f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} –∑–∞–∫—Ä—ã—Ç.",
                    reply_markup=_admin_actions_kb(ticket_id)
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=False)
                else:
                    raise
            try:
                user_id = int(ticket.get('user_id'))
                await bot.send_message(chat_id=user_id, text=f"‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
            except Exception:
                pass
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.")

    @router.callback_query(F.data.startswith("admin_reopen_"))
    async def admin_reopen_ticket(callback: types.CallbackQuery, bot: Bot):
        await callback.answer()
        try:
            ticket_id = int(callback.data.split("_")[-1])
        except Exception:
            return
        ticket = get_ticket(ticket_id)
        if not ticket:
            await callback.message.edit_text("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        forum_chat_id = int(ticket.get('forum_chat_id') or callback.message.chat.id)
        if not await _is_admin(bot, forum_chat_id, callback.from_user.id):
            return
        if set_ticket_status(ticket_id, 'open'):
            try:
                thread_id = ticket.get('message_thread_id')
                if thread_id:
                    await bot.reopen_forum_topic(chat_id=forum_chat_id, message_thread_id=int(thread_id))
            except Exception:
                pass
            try:
                await callback.message.edit_text(
                    f"üîì –¢–∏–∫–µ—Ç #{ticket_id} –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç.",
                    reply_markup=_admin_actions_kb(ticket_id)
                )
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await callback.answer("–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", show_alert=False)
                else:
                    raise
            try:
                user_id = int(ticket.get('user_id'))
                await bot.send_message(chat_id=user_id, text=f"üîì –í–∞—à —Ç–∏–∫–µ—Ç #{ticket_id} –±—ã–ª –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É.")
            except Exception:
                pass
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.")

    @router.callback_query(F.data.startswith("admin_delete_"))
    async def admin_delete_ticket(callback: types.CallbackQuery, bot: Bot):
        await callback.answer()
        try:
            ticket_id = int(callback.data.split("_")[-1])
        except Exception:
            return
        ticket = get_ticket(ticket_id)
        if not ticket:
            await callback.message.edit_text("–¢–∏–∫–µ—Ç —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        forum_chat_id = int(ticket.get('forum_chat_id') or callback.message.chat.id)
        if not await _is_admin(bot, forum_chat_id, callback.from_user.id):
            return
        try:
            thread_id = ticket.get('message_thread_id')
            if thread_id:
                await bot.delete_forum_topic(chat_id=forum_chat_id, message_thread_id=int(thread_id))
        except Exception:
            try:
                if thread_id:
                    await bot.close_forum_topic(chat_id=forum_chat_id, message_thread_id=int(thread_id))
            except Exception:
                pass
        if delete_ticket(ticket_id):
            try:
                await callback.message.edit_text(f"üóë –¢–∏–∫–µ—Ç #{ticket_id} —É–¥–∞–ª—ë–Ω.")
            except TelegramBadRequest as e:
                if "message to edit not found" in str(e) or "message is not modified" in str(e):
                    await callback.message.answer(f"üóë –¢–∏–∫–µ—Ç #{ticket_id} —É–¥–∞–ª—ë–Ω.")
                else:
                    raise
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∏–∫–µ—Ç.")

    @router.callback_query(F.data.startswith("admin_star_"))
    async def admin_toggle_star(callback: types.CallbackQuery, bot: Bot):
        await callback.answer()
        try:
            ticket_id = int(callback.data.split("_")[-1])
        except Exception:
            return
        ticket = get_ticket(ticket_id)
        if not ticket:
            return
        forum_chat_id = int(ticket.get('forum_chat_id') or callback.message.chat.id)
        if not await _is_admin(bot, forum_chat_id, callback.from_user.id):
            return
        subject = (ticket.get('subject') or '').strip()
        is_starred = subject.startswith("‚≠ê ")
        if is_starred:
            base_subject = subject[2:].strip()
            new_subject = base_subject if base_subject else "–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã"
        else:
            base_subject = subject if subject else "–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã"
            new_subject = f"‚≠ê {base_subject}"
        if update_ticket_subject(ticket_id, new_subject):
            try:
                thread_id = ticket.get('message_thread_id')
                if thread_id and ticket.get('forum_chat_id'):
                    user_id = int(ticket.get('user_id')) if ticket.get('user_id') else None
                    author_tag = None
                    if user_id:
                        try:
                            user = await bot.get_chat(user_id)
                            username = getattr(user, 'username', None)
                            author_tag = f"@{username}" if username else f"ID {user_id}"
                        except Exception:
                            author_tag = f"ID {user_id}"
                    else:
                        author_tag = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    subj_full = (new_subject or '–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã')
                    is_star2 = subj_full.strip().startswith('‚≠ê')
                    display_subj2 = (subj_full.lstrip('‚≠êÔ∏è ').strip() if is_star2 else subj_full)
                    trimmed = display_subj2[:40]
                    important_prefix2 = 'üî¥ –í–∞–∂–Ω–æ: ' if is_star2 else ''
                    topic_name = f"#{ticket_id} {important_prefix2}{trimmed} ‚Ä¢ –æ—Ç {author_tag}"
                    await bot.edit_forum_topic(chat_id=int(ticket['forum_chat_id']), message_thread_id=int(thread_id), name=topic_name)
            except Exception:
                pass
            try:
                thread_id = ticket.get('message_thread_id')
                forum_chat_id = ticket.get('forum_chat_id')
                if thread_id and forum_chat_id:
                    state_text = "–≤–∫–ª—é—á–µ–Ω–∞" if not is_starred else "—Å–Ω—è—Ç–∞"
                    msg = await bot.send_message(
                        chat_id=int(forum_chat_id),
                        message_thread_id=int(thread_id),
                        text=f"‚≠ê –í–∞–∂–Ω–æ—Å—Ç—å {state_text} –¥–ª—è —Ç–∏–∫–µ—Ç–∞ #{ticket_id}."
                    )
                    if not is_starred:
                        try:
                            await bot.pin_chat_message(chat_id=int(forum_chat_id), message_id=msg.message_id, disable_notification=True)
                        except Exception:
                            pass
                    else:
                        try:
                            await bot.unpin_all_forum_topic_messages(chat_id=int(forum_chat_id), message_thread_id=int(thread_id))
                        except Exception:
                            pass
            except Exception:
                pass
            state_text = "–≤–∫–ª—é—á–µ–Ω–∞" if not is_starred else "—Å–Ω—è—Ç–∞"
            await callback.message.answer(f"‚≠ê –ü–æ–º–µ—Ç–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ {state_text}. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞.")

    @router.callback_query(F.data.startswith("admin_user_"))
    async def admin_show_user(callback: types.CallbackQuery, bot: Bot):
        await callback.answer()
        try:
            ticket_id = int(callback.data.split("_")[-1])
        except Exception:
            return
        ticket = get_ticket(ticket_id)
        if not ticket:
            return
        forum_chat_id = int(ticket.get('forum_chat_id') or callback.message.chat.id)
        if not await _is_admin(bot, forum_chat_id, callback.from_user.id):
            return
        user_id = int(ticket.get('user_id'))
        mention_link = f"tg://user?id={user_id}"
        username = None
        try:
            user = await bot.get_chat(user_id)
            username = getattr(user, 'username', None)
        except Exception:
            pass
        text = (
            "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∏–∫–µ—Ç–∞\n"
            f"ID: `{user_id}`\n"
            f"Username: @{username}\n" if username else ""
        ) + f"–°—Å—ã–ª–∫–∞: {mention_link}"
        await callback.message.answer(text, parse_mode="Markdown")

    @router.callback_query(F.data.startswith("admin_note_"))
    async def admin_note_prompt(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
        await callback.answer()
        try:
            ticket_id = int(callback.data.split("_")[-1])
        except Exception:
            return
        ticket = get_ticket(ticket_id)
        if not ticket:
            return
        forum_chat_id = int(ticket.get('forum_chat_id') or callback.message.chat.id)
        if not await _is_admin(bot, forum_chat_id, callback.from_user.id):
            return
        await state.update_data(note_ticket_id=ticket_id)
        await callback.message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞–º–µ—Ç–∫—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –û–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.set_state(AdminDialog.waiting_for_note)

    @router.callback_query(F.data.startswith("admin_notes_"))
    async def admin_list_notes(callback: types.CallbackQuery, bot: Bot):
        await callback.answer()
        try:
            ticket_id = int(callback.data.split("_")[-1])
        except Exception:
            return
        ticket = get_ticket(ticket_id)
        if not ticket:
            return
        forum_chat_id = int(ticket.get('forum_chat_id') or callback.message.chat.id)
        if not await _is_admin(bot, forum_chat_id, callback.from_user.id):
            return
        notes = [m for m in get_ticket_messages(ticket_id) if m.get('sender') == 'note']
        if not notes:
            await callback.message.answer("üóí –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        lines = [f"üóí –ó–∞–º–µ—Ç–∫–∏ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}:"]
        for m in notes:
            created = m.get('created_at')
            content = (m.get('content') or '').strip()
            lines.append(f"‚Äî ({created})\n{content}")
        text = "\n\n".join(lines)
        await callback.message.answer(text)

    @router.message(AdminDialog.waiting_for_note, F.is_topic_message == True)
    async def admin_note_receive(message: types.Message, state: FSMContext):
        data = await state.get_data()
        ticket_id = data.get('note_ticket_id')
        if not ticket_id:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏.")
            await state.clear()
            return
        author_id = message.from_user.id if message.from_user else None
        username = None
        if message.from_user:
            if message.from_user.username:
                username = f"@{message.from_user.username}"
            else:
                username = message.from_user.full_name or str(author_id)
        note_body = (message.text or message.caption or '').strip()
        note_text = f"[–ó–∞–º–µ—Ç–∫–∞ –æ—Ç {username} (ID: {author_id})]\n{note_body}" if author_id else note_body
        add_support_message(int(ticket_id), sender='note', content=note_text)
        await message.answer("üìù –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        await state.clear()

    @router.message(F.text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", F.chat.type == "private")
    async def start_text_button(message: types.Message, state: FSMContext):
        existing = _get_latest_open_ticket(message.from_user.id)
        if existing:
            await message.answer(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç #{existing['ticket_id']}. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ –Ω—ë–º."
            )
        else:
            await message.answer("üìù –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º')")
            await state.set_state(SupportDialog.waiting_for_subject)

    @router.message(F.text == "‚úçÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", F.chat.type == "private")
    async def new_ticket_text_button(message: types.Message, state: FSMContext):
        existing = _get_latest_open_ticket(message.from_user.id)
        if existing:
            await message.answer(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç #{existing['ticket_id']}. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É –≤ –Ω—ë–º."
            )
        else:
            await message.answer("üìù –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º')")
            await state.set_state(SupportDialog.waiting_for_subject)

    @router.message(F.text == "üì® –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", F.chat.type == "private")
    async def my_tickets_text_button(message: types.Message):
        tickets = get_user_tickets(message.from_user.id)
        text = "–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:" if tickets else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π."
        rows = []
        if tickets:
            for t in tickets:
                status_text = "üü¢ –û—Ç–∫—Ä—ã—Ç" if t.get('status') == 'open' else "üîí –ó–∞–∫—Ä—ã—Ç"
                title = f"#{t['ticket_id']} ‚Ä¢ {status_text}"
                if t.get('subject'):
                    title += f" ‚Ä¢ {t['subject'][:20]}"
                rows.append([types.InlineKeyboardButton(text=title, callback_data=f"support_view_{t['ticket_id']}")])
        await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=rows))

    @router.message(F.chat.type == "private")
    async def relay_user_message_to_forum(message: types.Message, bot: Bot, state: FSMContext):
        current_state = await state.get_state()
        if current_state is not None:
            return

        user_id = message.from_user.id if message.from_user else None
        if not user_id:
            return

        tickets = get_user_tickets(user_id)
        content = (message.text or message.caption or '')
        ticket = None
        if not tickets:
            ticket_id = create_support_ticket(user_id, None)
            add_support_message(ticket_id, sender='user', content=content)
            ticket = get_ticket(ticket_id)
            created_new = True
        else:
            open_tickets = [t for t in tickets if t.get('status') == 'open']
            if not open_tickets:
                ticket_id = create_support_ticket(user_id, None)
                add_support_message(ticket_id, sender='user', content=content)
                ticket = get_ticket(ticket_id)
                created_new = True
            else:
                ticket = max(open_tickets, key=lambda t: int(t['ticket_id']))
                ticket_id = int(ticket['ticket_id'])
                add_support_message(ticket_id, sender='user', content=content)
                created_new = False

        try:
            forum_chat_id = ticket.get('forum_chat_id')
            thread_id = ticket.get('message_thread_id')
            if not (forum_chat_id and thread_id):
                support_forum_chat_id = get_setting("support_forum_chat_id")
                if support_forum_chat_id:
                    try:
                        chat_id = int(support_forum_chat_id)
                        subj_full = (ticket.get('subject') or '–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã')
                        is_star = subj_full.strip().startswith('‚≠ê')
                        display_subj = (subj_full.lstrip('‚≠êÔ∏è ').strip() if is_star else subj_full)
                        trimmed = display_subj[:40]
                        author_tag = (
                            (message.from_user.username and f"@{message.from_user.username}")
                            or (message.from_user.full_name if message.from_user else None)
                            or str(message.from_user.id)
                        )
                        important_prefix = 'üî¥ –í–∞–∂–Ω–æ: ' if is_star else ''
                        topic_name = f"#{ticket_id} {important_prefix}{trimmed} ‚Ä¢ –æ—Ç {author_tag}"
                        forum_topic = await bot.create_forum_topic(chat_id=chat_id, name=topic_name)
                        thread_id = forum_topic.message_thread_id
                        forum_chat_id = chat_id
                        update_ticket_thread_info(ticket_id, str(chat_id), int(thread_id))
                        subj_display = (ticket.get('subject') or '‚Äî')
                        header = (
                            ("üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n" if created_new else "üìå –¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n") +
                            f"–¢–∏–∫–µ—Ç: #{ticket_id}\n" \
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.full_name} (ID: {message.from_user.id})\n" \
                            f"–¢–µ–º–∞: {subj_display} ‚Äî –æ—Ç @{message.from_user.username or message.from_user.full_name} (ID: {message.from_user.id})"
                        )
                        await bot.send_message(chat_id=chat_id, text=header, message_thread_id=thread_id, reply_markup=_admin_actions_kb(ticket_id))
                    except Exception as e:
                        logger.warning(f"Failed to auto-create forum topic for ticket {ticket_id}: {e}")
            if forum_chat_id and thread_id:
                try:
                    subj_full = (ticket.get('subject') or '–û–±—Ä–∞—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–º—ã')
                    is_star = subj_full.strip().startswith('‚≠ê')
                    display_subj = (subj_full.lstrip('‚≠êÔ∏è ').strip() if is_star else subj_full)
                    trimmed = display_subj[:40]
                    author_tag = (
                        (message.from_user.username and f"@{message.from_user.username}")
                        or (message.from_user.full_name if message.from_user else None)
                        or str(message.from_user.id)
                    )
                    important_prefix = 'üî¥ –í–∞–∂–Ω–æ: ' if is_star else ''
                    topic_name = f"#{ticket_id} {important_prefix}{trimmed} ‚Ä¢ –æ—Ç {author_tag}"
                    await bot.edit_forum_topic(chat_id=int(forum_chat_id), message_thread_id=int(thread_id), name=topic_name)
                except Exception as e:
                    logger.warning(f"Failed to rename topic for free-form message ticket {ticket_id}: {e}")
                username = (message.from_user.username and f"@{message.from_user.username}") or message.from_user.full_name or str(message.from_user.id)
                await bot.send_message(
                    chat_id=int(forum_chat_id),
                    text=(
                        f"üÜò –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {username} (ID: {message.from_user.id}) –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id}:" if created_new
                        else f"‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket_id} –æ—Ç {username} (ID: {message.from_user.id}):"
                    ),
                    message_thread_id=int(thread_id)
                )
                await bot.copy_message(chat_id=int(forum_chat_id), from_chat_id=message.chat.id, message_id=message.message_id, message_thread_id=int(thread_id))
        except Exception as e:
            logger.warning(f"Failed to mirror user free-form message to forum for ticket {ticket_id}: {e}")

        try:
            if created_new:
                await message.answer(f"‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: #{ticket_id}. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
            else:
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.")
        except Exception:
            pass

    return router
