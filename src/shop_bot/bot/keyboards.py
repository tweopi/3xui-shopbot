import logging

from datetime import datetime

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shop_bot.data_manager.remnawave_repository import get_setting

logger = logging.getLogger(__name__)

main_reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True
)

def create_main_menu_keyboard(user_keys: list, trial_available: bool, is_admin: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    if trial_available and get_setting("trial_enabled") == "true":
        builder.button(text="üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="get_trial")

    builder.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")
    builder.button(text=f"üîë –ú–æ–∏ –∫–ª—é—á–∏ ({len(user_keys)})", callback_data="manage_keys")
    builder.button(text="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="show_referral_program")
    builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="show_help")
    builder.button(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="show_about")
    builder.button(text="‚ùì –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="howto_vless")
    if is_admin:
        builder.button(text="‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_menu")

    layout = [1 if trial_available and get_setting("trial_enabled") == "true" else 0, 2, 1, 2, 1, 1 if is_admin else 0]
    actual_layout = [size for size in layout if size > 0]
    builder.adjust(*actual_layout)
    
    return builder.as_markup()

def create_admin_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    builder.button(text="üåç –ö–ª—é—á–∏ –Ω–∞ —Ö–æ—Å—Ç–µ", callback_data="admin_host_keys")
    builder.button(text="üéÅ –í—ã–¥–∞—Ç—å –∫–ª—é—á", callback_data="admin_gift_key")
    builder.button(text="‚ö° –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏", callback_data="admin_speedtest")
    builder.button(text="üóÑ –ë—ç–∫–∞–ø –ë–î", callback_data="admin_backup_db")
    builder.button(text="‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î", callback_data="admin_restore_db")
    builder.button(text="üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="admin_admins_menu")
    builder.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="start_broadcast")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    # 4 —Ä—è–¥–∞ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ (–≤–∫–ª—é—á–∞—è –±—ç–∫–∞–ø/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ), –∑–∞—Ç–µ–º "–ù–∞–∑–∞–¥"
    builder.adjust(2, 2, 2, 2, 1)
    return builder.as_markup()

def create_admins_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin")
    builder.button(text="‚ûñ –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_remove_admin")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_view_admins")
    builder.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(2, 2)
    return builder.as_markup()

def create_admin_users_keyboard(users: list[dict], page: int = 0, page_size: int = 10) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    start = page * page_size
    end = start + page_size
    for u in users[start:end]:
        user_id = u.get('telegram_id') or u.get('user_id') or u.get('id')
        username = u.get('username') or '‚Äî'
        title = f"{user_id} ‚Ä¢ @{username}" if username != '‚Äî' else f"{user_id}"
        builder.button(text=title, callback_data=f"admin_view_user_{user_id}")
    # pagination
    total = len(users)
    have_prev = page > 0
    have_next = end < total
    if have_prev:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_users_page_{page-1}")
    if have_next:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_users_page_{page+1}")
    builder.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    # layout: list (1 per row), then pagination/buttons (2), then back (1)
    rows = [1] * len(users[start:end])
    tail = []
    if have_prev or have_next:
        tail.append(2 if (have_prev and have_next) else 1)
    tail.append(1)
    builder.adjust(*(rows + tail if rows else ([2] if (have_prev or have_next) else []) + [1]))
    return builder.as_markup()

def create_admin_user_actions_keyboard(user_id: int, is_banned: bool | None = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_add_balance_{user_id}")
    builder.button(text="‚ûñ –°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_deduct_balance_{user_id}")
    builder.button(text="üéÅ –í—ã–¥–∞—Ç—å –∫–ª—é—á", callback_data=f"admin_gift_key_{user_id}")
    builder.button(text="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_user_referrals_{user_id}")
    if is_banned is True:
        builder.button(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data=f"admin_unban_user_{user_id}")
    else:
        builder.button(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"admin_ban_user_{user_id}")
    builder.button(text="‚úèÔ∏è –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_user_keys_{user_id}")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="admin_users")
    builder.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    # –°–¥–µ–ª–∞–µ–º —à–∏—Ä–µ: 2 –∫–æ–ª–æ–Ω–∫–∏, –∑–∞—Ç–µ–º –Ω–∞–∑–∞–¥ –∏ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    builder.adjust(2, 2, 2, 2, 1)
    return builder.as_markup()

def create_admin_user_keys_keyboard(user_id: int, keys: list[dict]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if keys:
        for k in keys:
            kid = k.get('key_id')
            host = k.get('host_name') or '‚Äî'
            email = k.get('key_email') or '‚Äî'
            title = f"#{kid} ‚Ä¢ {host} ‚Ä¢ {email[:20]}"
            builder.button(text=title, callback_data=f"admin_edit_key_{kid}")
    else:
        builder.button(text="–ö–ª—é—á–µ–π –Ω–µ—Ç", callback_data="noop")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_view_user_{user_id}")
    builder.adjust(1)
    return builder.as_markup()

def create_admin_key_actions_keyboard(key_id: int, user_id: int | None = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data=f"admin_key_edit_host_{key_id}")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–Ω–∏", callback_data=f"admin_key_extend_{key_id}")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data=f"admin_key_delete_{key_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª—é—á–∞–º", callback_data=f"admin_key_back_{key_id}")
    if user_id is not None:
        builder.button(text="üë§ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_view_user_{user_id}")
        builder.adjust(2, 2, 1)
    else:
        builder.adjust(2, 2)
    return builder.as_markup()

def create_admin_delete_key_confirm_keyboard(key_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"admin_key_delete_confirm_{key_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_key_delete_cancel_{key_id}")
    builder.adjust(1)
    return builder.as_markup()

def create_admin_cancel_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
    return builder.as_markup()

def create_broadcast_options_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="broadcast_add_button")
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="broadcast_skip_button")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    builder.adjust(2, 1)
    return builder.as_markup()

def create_broadcast_confirmation_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="confirm_broadcast")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    builder.adjust(2)
    return builder.as_markup()

def create_broadcast_cancel_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
    return builder.as_markup()

def create_about_keyboard(channel_url: str | None, terms_url: str | None, privacy_url: str | None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if channel_url:
        builder.button(text="üì∞ –ù–∞—à –∫–∞–Ω–∞–ª", url=channel_url)
    if terms_url:
        builder.button(text="üìÑ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", url=terms_url)
    if privacy_url:
        builder.button(text="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", url=privacy_url)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()
    
def create_support_keyboard(support_user: str | None = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º username –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    username = (support_user or "").strip()
    if not username:
        username = (get_setting("support_bot_username") or get_setting("support_user") or "").strip()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ tg:// —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å username/—Å—Å—ã–ª–∫–∞
    url: str | None = None
    if username:
        if username.startswith("@"):  # @username
            url = f"tg://resolve?domain={username[1:]}"
        elif username.startswith("tg://"):  # —É–∂–µ tg-—Å—Ö–µ–º–∞
            url = username
        elif username.startswith("http://") or username.startswith("https://"):
            # http(s) —Å—Å—ã–ª–∫–∏ –Ω–∞ t.me/telegram.me -> –≤ tg://
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å domain
            try:
                # –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
                part = username.split("/")[-1].split("?")[0]
                if part:
                    url = f"tg://resolve?domain={part}"
            except Exception:
                url = username
        else:
            # –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
            url = f"tg://resolve?domain={username}"

    if url:
        builder.button(text="üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=url)
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    else:
        # –§–æ–ª–±—ç–∫: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        builder.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="show_help")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_support_bot_link_keyboard(support_bot_username: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    username = support_bot_username.lstrip("@")
    deep_link = f"tg://resolve?domain={username}&start=new"
    builder.button(text="üÜò –û—Ç–∫—Ä—ã—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=deep_link)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_support_menu_keyboard(has_external: bool = False) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="support_new_ticket")
    builder.button(text="üì® –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="support_my_tickets")
    if has_external:
        builder.button(text="üÜò –í–Ω–µ—à–Ω—è—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_external")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_tickets_list_keyboard(tickets: list[dict]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if tickets:
        for t in tickets:
            title = f"#{t['ticket_id']} ‚Ä¢ {t.get('status','open')}"
            if t.get('subject'):
                title += f" ‚Ä¢ {t['subject'][:20]}"
            builder.button(text=title, callback_data=f"support_view_{t['ticket_id']}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="support_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_ticket_actions_keyboard(ticket_id: int, is_open: bool = True) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if is_open:
        builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"support_reply_{ticket_id}")
        builder.button(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"support_close_{ticket_id}")
    builder.button(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="support_my_tickets")
    builder.adjust(1)
    return builder.as_markup()

def create_host_selection_keyboard(hosts: list, action: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for host in hosts:
        callback_data = f"select_host_{action}_{host['host_name']}"
        builder.button(text=host['host_name'], callback_data=callback_data)
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_keys" if action == 'new' else "back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_plans_keyboard(plans: list[dict], action: str, host_name: str, key_id: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for plan in plans:
        callback_data = f"buy_{host_name}_{plan['plan_id']}_{action}_{key_id}"
        builder.button(text=f"{plan['plan_name']} - {plan['price']:.0f} RUB", callback_data=callback_data)
    back_callback = "manage_keys" if action == "extend" else "buy_new_key"
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
    builder.adjust(1) 
    return builder.as_markup()

def create_skip_email_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ—á—Ç—ã", callback_data="skip_email")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="back_to_plans")
    builder.adjust(1)
    return builder.as_markup()

def create_payment_method_keyboard(
    payment_methods: dict,
    action: str,
    key_id: int,
    show_balance: bool | None = None,
    main_balance: float | None = None,
    price: float | None = None,
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–≤ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ/–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)
    if show_balance:
        label = "üíº –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞"
        if main_balance is not None:
            try:
                label += f" ({main_balance:.0f} RUB)"
            except Exception:
                pass
        builder.button(text=label, callback_data="pay_balance")

    # –í–Ω–µ—à–Ω–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    if payment_methods and payment_methods.get("yookassa"):
        if get_setting("sbp_enabled"):
            builder.button(text="üè¶ –°–ë–ü / –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="pay_yookassa")
        else:
            builder.button(text="üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="pay_yookassa")
    if payment_methods and payment_methods.get("heleket"):
        builder.button(text="üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="pay_heleket")
    if payment_methods and payment_methods.get("cryptobot"):
        builder.button(text="ü§ñ CryptoBot", callback_data="pay_cryptobot")
    if payment_methods and payment_methods.get("tonconnect"):
        callback_data_ton = "pay_tonconnect"
        logger.info(f"Creating TON button with callback_data: '{callback_data_ton}'")
        builder.button(text="ü™ô TON Connect", callback_data=callback_data_ton)

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_email_prompt")
    builder.adjust(1)
    return builder.as_markup()

def create_ton_connect_keyboard(connect_url: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–æ—à–µ–ª–µ–∫", url=connect_url)
    return builder.as_markup()

def create_payment_keyboard(payment_url: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)
    return builder.as_markup()

def create_topup_payment_method_keyboard(payment_methods: dict) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # –¢–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã, –±–µ–∑ –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞
    if payment_methods and payment_methods.get("yookassa"):
        if get_setting("sbp_enabled"):
            builder.button(text="üè¶ –°–ë–ü / –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="topup_pay_yookassa")
        else:
            builder.button(text="üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="topup_pay_yookassa")
    if payment_methods and payment_methods.get("heleket"):
        builder.button(text="üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="topup_pay_heleket")
    if payment_methods and payment_methods.get("cryptobot"):
        builder.button(text="ü§ñ CryptoBot", callback_data="topup_pay_cryptobot")
    if payment_methods and payment_methods.get("tonconnect"):
        builder.button(text="ü™ô TON Connect", callback_data="topup_pay_tonconnect")

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_profile")
    builder.adjust(1)
    return builder.as_markup()

def create_keys_management_keyboard(keys: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if keys:
        for i, key in enumerate(keys):
            expiry_date = datetime.fromisoformat(key['expiry_date'])
            status_icon = "‚úÖ" if expiry_date > datetime.now() else "‚ùå"
            host_name = key.get('host_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç')
            button_text = f"{status_icon} –ö–ª—é—á #{i+1} ({host_name}) (–¥–æ {expiry_date.strftime('%d.%m.%Y')})"
            builder.button(text=button_text, callback_data=f"show_key_{key['key_id']}")
    builder.button(text="‚ûï –ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á", callback_data="buy_new_key")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_key_info_keyboard(key_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á", callback_data=f"extend_key_{key_id}")
    builder.button(text="üì± –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥", callback_data=f"show_qr_{key_id}")
    builder.button(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data=f"howto_vless_{key_id}")
    builder.button(text="üåç –°–º–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data=f"switch_server_{key_id}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π", callback_data="manage_keys")
    builder.adjust(1)
    return builder.as_markup()

def create_howto_vless_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üì± Android", callback_data="howto_android")
    builder.button(text="üì± iOS", callback_data="howto_ios")
    builder.button(text="üíª Windows", callback_data="howto_windows")
    builder.button(text="üêß Linux", callback_data="howto_linux")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def create_howto_vless_keyboard_key(key_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üì± Android", callback_data="howto_android")
    builder.button(text="üì± iOS", callback_data="howto_ios")
    builder.button(text="üíª Windows", callback_data="howto_windows")
    builder.button(text="üêß Linux", callback_data="howto_linux")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–ª—é—á—É", callback_data=f"show_key_{key_id}")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def create_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    return builder.as_markup()

def create_profile_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_start")
    builder.button(text="ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="show_referral_program")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_welcome_keyboard(channel_url: str | None, is_subscription_forced: bool = False) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    if channel_url and is_subscription_forced:
        builder.button(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_url)
        builder.button(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription_and_agree")
    elif channel_url:
        builder.button(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", url=channel_url)
        builder.button(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", callback_data="check_subscription_and_agree")
    else:
        builder.button(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", callback_data="check_subscription_and_agree")
        
    builder.adjust(1)
    return builder.as_markup()

def get_main_menu_button() -> InlineKeyboardButton:
    return InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="show_main_menu")

def get_buy_button() -> InlineKeyboardButton:
    return InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_vpn")


def create_admin_users_pick_keyboard(users: list[dict], page: int = 0, page_size: int = 10, action: str = "gift") -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    start = page * page_size
    end = start + page_size
    for u in users[start:end]:
        user_id = u.get('telegram_id') or u.get('user_id') or u.get('id')
        username = u.get('username') or '‚Äî'
        title = f"{user_id} ‚Ä¢ @{username}" if username != '‚Äî' else f"{user_id}"
        builder.button(text=title, callback_data=f"admin_{action}_pick_user_{user_id}")
    total = len(users)
    have_prev = page > 0
    have_next = end < total
    if have_prev:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_{action}_pick_user_page_{page-1}")
    if have_next:
        builder.button(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_{action}_pick_user_page_{page+1}")
    builder.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    rows = [1] * len(users[start:end])
    tail = []
    if have_prev or have_next:
        tail.append(2 if (have_prev and have_next) else 1)
    tail.append(1)
    builder.adjust(*(rows + tail if rows else ([2] if (have_prev or have_next) else []) + [1]))
    return builder.as_markup()

def create_admin_hosts_pick_keyboard(hosts: list[dict], action: str = "gift") -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if hosts:
        for h in hosts:
            name = h.get('host_name')
            if action == "speedtest":
                # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ: –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏ –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞
                builder.button(text=name, callback_data=f"admin_{action}_pick_host_{name}")
                builder.button(text="üõ† –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞", callback_data=f"admin_speedtest_autoinstall_{name}")
            else:
                builder.button(text=name, callback_data=f"admin_{action}_pick_host_{name}")
    else:
        builder.button(text="–•–æ—Å—Ç–æ–≤ –Ω–µ—Ç", callback_data="noop")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è speedtest
    if action == "speedtest":
        builder.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –≤—Å–µ—Ö", callback_data="admin_speedtest_run_all")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_{action}_back_to_users")
    # –°–µ—Ç–∫–∞: –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è speedtest (—Ö–æ—Å—Ç + –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞), –∏–Ω–∞—á–µ –ø–æ 1
    if action == "speedtest":
        rows = [2] * (len(hosts) if hosts else 1)
        tail = [1, 1]
    else:
        rows = [1] * (len(hosts) if hosts else 1)
        tail = [1]
    builder.adjust(*(rows + tail))
    return builder.as_markup()

def create_admin_keys_for_host_keyboard(host_name: str, keys: list[dict]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if keys:
        for k in keys:
            kid = k.get('key_id')
            email = k.get('key_email') or '‚Äî'
            expiry = k.get('expiry_date') or '‚Äî'
            title = f"#{kid} ‚Ä¢ {email[:24]} ‚Ä¢ –¥–æ {expiry}"
            builder.button(text=title, callback_data=f"admin_edit_key_{kid}")
    else:
        builder.button(text="–ö–ª—é—á–µ–π –Ω–∞ —Ö–æ—Å—Ç–µ –Ω–µ—Ç", callback_data="noop")
    builder.button(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É —Ö–æ—Å—Ç–∞", callback_data="admin_hostkeys_back_to_hosts")
    builder.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(1)
    return builder.as_markup()

def create_admin_months_pick_keyboard(action: str = "gift") -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for m in (1, 3, 6, 12):
        builder.button(text=f"{m} –º–µ—Å.", callback_data=f"admin_{action}_pick_months_{m}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_{action}_back_to_hosts")
    builder.adjust(2, 2, 1)
    return builder.as_markup()
