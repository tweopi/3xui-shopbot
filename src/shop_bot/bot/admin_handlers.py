import logging
import asyncio
import time
import uuid
import re
import html as html_escape
from datetime import datetime

from aiogram import Bot, Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from shop_bot.bot import keyboards
from shop_bot.data_manager import speedtest_runner
from shop_bot.data_manager import remnawave_repository as rw_repo
from shop_bot.data_manager.remnawave_repository import (
    get_all_users,
    get_setting,
    get_user,
    get_keys_for_user,
    create_gift_key,
    get_all_hosts,
    add_to_balance,
    deduct_from_balance,
    ban_user,
    unban_user,
    delete_key_by_email,
    get_admin_stats,
    get_keys_for_host,
    is_admin,
    get_referral_count,
    get_referral_balance_all,
    get_referrals_for_user,
)
from shop_bot.data_manager import backup_manager
from shop_bot.bot.handlers import show_main_menu
from shop_bot.modules.remnawave_api import create_or_update_key_on_host, delete_client_on_host

logger = logging.getLogger(__name__)

class Broadcast(StatesGroup):
    waiting_for_message = State()
    waiting_for_button_option = State()
    waiting_for_button_text = State()
    waiting_for_button_url = State()
    waiting_for_confirmation = State()


def get_admin_router() -> Router:
    admin_router = Router()

    # Helper: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞)
    def _format_user_mention(u: types.User) -> str:
        try:
            if u.username:
                uname = u.username.lstrip('@')
                return f"@{uname}"
            # Fallback: –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ ID —Å —á–∏—Ç–∞–µ–º—ã–º –∏–º–µ–Ω–µ–º
            full_name = (u.full_name or u.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä").strip()
            # html_escape ‚Äî —ç—Ç–æ –º–æ–¥—É–ª—å, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–∫ html; —É –Ω–µ–≥–æ –µ—Å—Ç—å .escape
            try:
                safe_name = html_escape.escape(full_name)
            except Exception:
                safe_name = full_name
            return f"<a href='tg://user?id={u.id}'>{safe_name}</a>"
        except Exception:
            return str(getattr(u, 'id', '‚Äî'))

    async def show_admin_menu(message: types.Message, edit_message: bool = False):
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        stats = get_admin_stats() or {}
        today_new = stats.get('today_new_users', 0)
        today_income = float(stats.get('today_income', 0) or 0)
        today_keys = stats.get('today_issued_keys', 0)
        total_users = stats.get('total_users', 0)
        total_income = float(stats.get('total_income', 0) or 0)
        total_keys = stats.get('total_keys', 0)
        active_keys = stats.get('active_keys', 0)

        text = (
            "üìä <b>–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
            f"üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {today_new}\n"
            f"üí∞ –î–æ—Ö–æ–¥: {today_income:.2f} RUB\n"
            f"üîë –í—ã–¥–∞–Ω–æ –∫–ª—é—á–µ–π: {today_keys}\n\n"
            "<b>–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:</b>\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_income:.2f} RUB\n"
            f"üîë –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {total_keys}\n\n"
            "<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª—é—á–µ–π:</b>\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_keys}"
        )
        keyboard = keyboards.create_admin_menu_keyboard()
        if edit_message:
            try:
                await message.edit_text(text, reply_markup=keyboard)
            except Exception:
                pass
        else:
            await message.answer(text, reply_markup=keyboard)

    @admin_router.callback_query(F.data == "admin_menu")
    async def open_admin_menu_handler(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await show_admin_menu(callback.message, edit_message=True)

    # --- Speedtest: –∫–Ω–æ–ø–∫–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é -> –≤—ã–±–æ—Ä —Ö–æ—Å—Ç–∞ ---
    @admin_router.callback_query(F.data == "admin_speedtest")
    async def admin_speedtest_entry(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        hosts = get_all_hosts() or []
        if not hosts:
            await callback.message.answer("‚ö†Ô∏è –•–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
            return
        await callback.message.edit_text(
            "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏:",
            reply_markup=keyboards.create_admin_hosts_pick_keyboard(hosts, action="speedtest")
        )

    # --- Speedtest: –∑–∞–ø—É—Å–∫ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ö–æ—Å—Ç—É ---
    @admin_router.callback_query(F.data.startswith("admin_speedtest_pick_host_"))
    async def admin_speedtest_run(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        host_name = callback.data.replace("admin_speedtest_pick_host_", "", 1)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Å—Ç–∞—Ä—Ç–µ
        try:
            from shop_bot.data_manager.remnawave_repository import get_admin_ids
            admin_ids = list({*(get_admin_ids() or []), int(callback.from_user.id)})
        except Exception:
            admin_ids = [int(callback.from_user.id)]
        initiator = _format_user_mention(callback.from_user)
        start_text = f"üöÄ –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ö–æ—Å—Ç–∞: <b>{host_name}</b>\n(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {initiator})"
        for aid in admin_ids:
            try:
                await callback.bot.send_message(aid, start_text)
            except Exception:
                pass

        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        try:
            wait_msg = await callback.message.answer(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è <b>{host_name}</b>‚Ä¶")
        except Exception:
            wait_msg = None

        # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç (SSH + NET) –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        try:
            result = await speedtest_runner.run_both_for_host(host_name)
        except Exception as e:
            result = {"ok": False, "error": str(e), "details": {}}

        # –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        def fmt_part(title: str, d: dict | None) -> str:
            if not d:
                return f"<b>{title}:</b> ‚Äî"
            if not d.get("ok"):
                return f"<b>{title}:</b> ‚ùå {d.get('error') or '–æ—à–∏–±–∫–∞'}"
            ping = d.get('ping_ms')
            down = d.get('download_mbps')
            up = d.get('upload_mbps')
            srv = d.get('server_name') or '‚Äî'
            return (f"<b>{title}:</b> ‚úÖ\n"
                    f"‚Ä¢ ping: {ping if ping is not None else '‚Äî'} ms\n"
                    f"‚Ä¢ ‚Üì {down if down is not None else '‚Äî'} Mbps\n"
                    f"‚Ä¢ ‚Üë {up if up is not None else '‚Äî'} Mbps\n"
                    f"‚Ä¢ —Å–µ—Ä–≤–µ—Ä: {srv}")

        details = result.get('details') or {}
        text_res = (
            f"üèÅ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è <b>{host_name}</b>\n\n"
            + fmt_part("SSH", details.get('ssh')) + "\n\n"
            + fmt_part("NET", details.get('net'))
        )

        # –õ–æ–∫–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if wait_msg:
            try:
                await wait_msg.edit_text(text_res)
            except Exception:
                await callback.message.answer(text_res)
        else:
            await callback.message.answer(text_res)

        # –†–∞–∑–æ—Å–ª–∞—Ç—å —Ñ–∏–Ω–∞–ª –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for aid in admin_ids:
            if wait_msg and aid == callback.from_user.id:
                continue
            try:
                await callback.bot.send_message(aid, text_res)
            except Exception:
                pass

    # --- Speedtest: –ù–∞–∑–∞–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ —Ö–æ—Å—Ç–∞ ---
    @admin_router.callback_query(F.data == "admin_speedtest_back_to_users")
    async def admin_speedtest_back(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await show_admin_menu(callback.message, edit_message=True)

    # --- Speedtest: –ó–∞–ø—É—Å–∫ –¥–ª—è –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ ---
    @admin_router.callback_query(F.data == "admin_speedtest_run_all")
    async def admin_speedtest_run_all(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        try:
            from shop_bot.data_manager.remnawave_repository import get_admin_ids
            admin_ids = list({*(get_admin_ids() or []), int(callback.from_user.id)})
        except Exception:
            admin_ids = [int(callback.from_user.id)]
        initiator = _format_user_mention(callback.from_user)
        start_text = f"üöÄ –ó–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤\n(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {initiator})"
        for aid in admin_ids:
            try:
                await callback.bot.send_message(aid, start_text)
            except Exception:
                pass
        # –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ —Ö–æ—Å—Ç–∞–º
        hosts = get_all_hosts() or []
        summary_lines = []
        for h in hosts:
            name = h.get('host_name')
            try:
                res = await speedtest_runner.run_both_for_host(name)
                ok = res.get('ok')
                det = res.get('details') or {}
                dm = det.get('ssh', {}).get('download_mbps') or det.get('net', {}).get('download_mbps')
                um = det.get('ssh', {}).get('upload_mbps') or det.get('net', {}).get('upload_mbps')
                summary_lines.append(f"‚Ä¢ {name}: {'‚úÖ' if ok else '‚ùå'} ‚Üì {dm or '‚Äî'} ‚Üë {um or '‚Äî'}")
            except Exception as e:
                summary_lines.append(f"‚Ä¢ {name}: ‚ùå {e}")
        text = "üèÅ –¢–µ—Å—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à—ë–Ω:\n" + "\n".join(summary_lines)
        await callback.message.answer(text)
        for aid in admin_ids:
            # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É/–≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
            if aid == callback.from_user.id or aid == callback.message.chat.id:
                continue
            try:
                await callback.bot.send_message(aid, text)
            except Exception:
                pass

    # --- –ë—ç–∫–∞–ø –ë–î: —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
    @admin_router.callback_query(F.data == "admin_backup_db")
    async def admin_backup_db(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            wait = await callback.message.answer("‚è≥ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö‚Ä¶")
        except Exception:
            wait = None
        zip_path = backup_manager.create_backup_file()
        if not zip_path:
            if wait:
                await wait.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î")
            else:
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î")
            return
        # –û—Ç–ø—Ä–∞–≤–∏–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        try:
            sent = await backup_manager.send_backup_to_admins(callback.bot, zip_path)
        except Exception:
            sent = 0
        txt = f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: <b>{zip_path.name}</b>\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {sent}"
        if wait:
            try:
                await wait.edit_text(txt)
            except Exception:
                await callback.message.answer(txt)
        else:
            await callback.message.answer(txt)

    # --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î ---
    class AdminRestoreDB(StatesGroup):
        waiting_file = State()

    @admin_router.callback_query(F.data == "admin_restore_db")
    async def admin_restore_db_prompt(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await state.set_state(AdminRestoreDB.waiting_file)
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
        kb.adjust(1)
        text = (
            "‚ö†Ô∏è <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª <code>.zip</code> —Å –±—ç–∫–∞–ø–æ–º –∏–ª–∏ —Ñ–∞–π–ª <code>.db</code> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            "–¢–µ–∫—É—â–∞—è –ë–î –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
        )
        try:
            await callback.message.edit_text(text, reply_markup=kb.as_markup())
        except Exception:
            await callback.message.answer(text, reply_markup=kb.as_markup())

    @admin_router.message(AdminRestoreDB.waiting_file)
    async def admin_restore_db_receive(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        doc = message.document
        if not doc:
            await message.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª .zip –∏–ª–∏ .db")
            return
        filename = (doc.file_name or "uploaded.db").lower()
        if not (filename.endswith('.zip') or filename.endswith('.db')):
            await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .zip –∏–ª–∏ .db")
            return
        try:
            ts = datetime.now().strftime('%Y%m%d-%H%M%S')
            dest = backup_manager.BACKUPS_DIR / f"uploaded-{ts}-{filename}"
            dest.parent.mkdir(parents=True, exist_ok=True)
            await message.bot.download(doc, destination=dest)
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return
        ok = backup_manager.restore_from_file(dest)
        await state.clear()
        if ok:
            await message.answer("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.\n–ë–æ—Ç –∏ –ø–∞–Ω–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–æ–≤–æ–π –ë–î.")
        else:
            await message.answer("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")

    # --- Speedtest: –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ speedtest –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ö–æ—Å—Ç–µ ---
    @admin_router.callback_query(F.data.startswith("admin_speedtest_autoinstall_"))
    async def admin_speedtest_autoinstall(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        host_name = callback.data.replace("admin_speedtest_autoinstall_", "", 1)
        try:
            wait = await callback.message.answer(f"üõ† –ü—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å speedtest –Ω–∞ <b>{host_name}</b>‚Ä¶")
        except Exception:
            wait = None
        from shop_bot.data_manager.speedtest_runner import auto_install_speedtest_on_host
        try:
            res = await auto_install_speedtest_on_host(host_name)
        except Exception as e:
            res = {"ok": False, "log": f"–û—à–∏–±–∫–∞: {e}"}
        text = ("‚úÖ –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" if res.get("ok") else "‚ùå –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        text += f"\n<pre>{(res.get('log') or '')[:3500]}</pre>"
        if wait:
            try:
                await wait.edit_text(text)
            except Exception:
                await callback.message.answer(text)
        else:
            await callback.message.answer(text)


    # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —Å–ø–∏—Å–æ–∫, –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –ø—Ä–æ—Å–º–æ—Ç—Ä ---
    @admin_router.callback_query(F.data.startswith("admin_users"))
    async def admin_users_handler(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        users = get_all_users()
        page = 0
        if callback.data.startswith("admin_users_page_"):
            try:
                page = int(callback.data.split("_")[-1])
            except Exception:
                page = 0
        await callback.message.edit_text(
            "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>",
            reply_markup=keyboards.create_admin_users_keyboard(users, page=page)
        )

    @admin_router.callback_query(F.data.startswith("admin_view_user_"))
    async def admin_view_user_handler(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        user = get_user(user_id)
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        # –°–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        username = user.get('username') or '‚Äî'
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.get('username'):
            uname = user.get('username').lstrip('@')
            user_tag = f"<a href='https://t.me/{uname}'>@{uname}</a>"
        else:
            user_tag = f"<a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
        is_banned = user.get('is_banned', False)
        total_spent = user.get('total_spent', 0)
        balance = user.get('balance', 0)
        referred_by = user.get('referred_by')
        keys = get_keys_for_user(user_id)
        keys_count = len(keys)
        text = (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</b>\n\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_tag}\n"
            f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª: {float(total_spent):.2f} RUB\n"
            f"–ë–∞–ª–∞–Ω—Å: {float(balance):.2f} RUB\n"
            f"–ó–∞–±–∞–Ω–µ–Ω: {'–¥–∞' if is_banned else '–Ω–µ—Ç'}\n"
            f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω: {referred_by if referred_by else '‚Äî'}\n"
            f"–ö–ª—é—á–µ–π: {keys_count}"
        )
        await callback.message.edit_text(
            text,
            reply_markup=keyboards.create_admin_user_actions_keyboard(user_id, is_banned=is_banned)
        )

    # --- –ë–∞–Ω/—Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    @admin_router.callback_query(F.data.startswith("admin_ban_user_"))
    async def admin_ban_user(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        try:
            ban_user(user_id)
            await callback.message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
            try:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –±–µ–∑ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
                from shop_bot.data_manager.remnawave_repository import get_setting as _get_setting
                support = (_get_setting("support_bot_username") or _get_setting("support_user") or "").strip()
                kb = InlineKeyboardBuilder()
                url = None
                if support:
                    if support.startswith("@"):  # @username
                        url = f"tg://resolve?domain={support[1:]}"
                    elif support.startswith("tg://"):
                        url = support
                    elif support.startswith("http://") or support.startswith("https://"):
                        try:
                            part = support.split("/")[-1].split("?")[0]
                            if part:
                                url = f"tg://resolve?domain={part}"
                        except Exception:
                            url = support
                    else:
                        url = f"tg://resolve?domain={support}"
                if url:
                    kb.button(text="üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=url)
                else:
                    kb.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="show_help")
                await callback.bot.send_message(
                    user_id,
                    "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=kb.as_markup()
                )
            except Exception:
                pass
        except Exception as e:
            await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user(user_id) or {}
        username = user.get('username') or '‚Äî'
        if user.get('username'):
            uname = user.get('username').lstrip('@')
            user_tag = f"<a href='https://t.me/{uname}'>@{uname}</a>"
        else:
            user_tag = f"<a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
        total_spent = user.get('total_spent', 0)
        balance = user.get('balance', 0)
        referred_by = user.get('referred_by')
        keys = get_keys_for_user(user_id)
        keys_count = len(keys)
        text = (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</b>\n\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_tag}\n"
            f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª: {float(total_spent):.2f} RUB\n"
            f"–ë–∞–ª–∞–Ω—Å: {float(balance):.2f} RUB\n"
            f"–ó–∞–±–∞–Ω–µ–Ω: –¥–∞\n"
            f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω: {referred_by if referred_by else '‚Äî'}\n"
            f"–ö–ª—é—á–µ–π: {keys_count}"
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=keyboards.create_admin_user_actions_keyboard(user_id, is_banned=True)
            )
        except Exception:
            pass

    # --- –ü–æ–¥–º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ---
    @admin_router.callback_query(F.data == "admin_admins_menu")
    async def admin_admins_menu_entry(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await callback.message.edit_text(
            "üëÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>",
            reply_markup=keyboards.create_admins_menu_keyboard()
        )

    @admin_router.callback_query(F.data == "admin_view_admins")
    async def admin_view_admins(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            from shop_bot.data_manager.remnawave_repository import get_admin_ids
            ids = list(get_admin_ids() or [])
        except Exception:
            ids = []
        if not ids:
            text = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç."
        else:
            lines = []
            for aid in ids:
                try:
                    u = get_user(int(aid)) or {}
                except Exception:
                    u = {}
                uname = (u.get('username') or '').strip()
                if uname:
                    uname_clean = uname.lstrip('@')
                    tag = f"<a href='https://t.me/{uname_clean}'>@{uname_clean}</a>"
                else:
                    tag = f"<a href='tg://user?id={aid}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
                lines.append(f"‚Ä¢ ID: {aid} ‚Äî {tag}")
            text = "üìã <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b>:\n" + "\n".join(lines)
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_admins_menu")
        kb.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
        kb.adjust(1, 1)
        try:
            await callback.message.edit_text(text, reply_markup=kb.as_markup())
        except Exception:
            await callback.message.answer(text, reply_markup=kb.as_markup())

    @admin_router.callback_query(F.data.startswith("admin_unban_user_"))
    async def admin_unban_user(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        try:
            unban_user(user_id)
            await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–∞–Ω–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                kb = InlineKeyboardBuilder()
                kb.row(keyboards.get_main_menu_button())
                await callback.bot.send_message(
                    user_id,
                    "‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    reply_markup=kb.as_markup()
                )
            except Exception:
                pass
        except Exception as e:
            await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user(user_id) or {}
        username = user.get('username') or '‚Äî'
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.get('username'):
            uname = user.get('username').lstrip('@')
            user_tag = f"<a href='https://t.me/{uname}'>@{uname}</a>"
        else:
            user_tag = f"<a href='tg://user?id={user_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
        total_spent = user.get('total_spent', 0)
        balance = user.get('balance', 0)
        referred_by = user.get('referred_by')
        keys = get_keys_for_user(user_id)
        keys_count = len(keys)
        text = (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</b>\n\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_tag}\n"
            f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª: {float(total_spent):.2f} RUB\n"
            f"–ë–∞–ª–∞–Ω—Å: {float(balance):.2f} RUB\n"
            f"–ó–∞–±–∞–Ω–µ–Ω: –Ω–µ—Ç\n"
            f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω: {referred_by if referred_by else '‚Äî'}\n"
            f"–ö–ª—é—á–µ–π: {keys_count}"
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=keyboards.create_admin_user_actions_keyboard(user_id, is_banned=False)
            )
        except Exception:
            pass

    # --- –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–ø–∏—Å–æ–∫ –∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–ª—é—á–∞ ---
    @admin_router.callback_query(F.data.startswith("admin_user_keys_"))
    async def admin_user_keys(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        keys = get_keys_for_user(user_id)
        await callback.message.edit_text(
            f"üîë –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
            reply_markup=keyboards.create_admin_user_keys_keyboard(user_id, keys)
        )

    @admin_router.callback_query(F.data.startswith("admin_user_referrals_"))
    async def admin_user_referrals(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        inviter = get_user(user_id)
        if not inviter:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        refs = get_referrals_for_user(user_id) or []
        ref_count = len(refs)
        try:
            total_ref_earned = float(get_referral_balance_all(user_id) or 0)
        except Exception:
            total_ref_earned = 0.0
        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –¥–ª–∏–Ω–µ
        max_items = 30
        lines = []
        for r in refs[:max_items]:
            rid = r.get('telegram_id')
            uname = r.get('username') or '‚Äî'
            rdate = r.get('registration_date') or '‚Äî'
            spent = float(r.get('total_spent') or 0)
            lines.append(f"‚Ä¢ @{uname} (ID: {rid}) ‚Äî —Ä–µ–≥: {rdate}, –ø–æ—Ç—Ä–∞—Ç–∏–ª: {spent:.2f} RUB")
        more_suffix = "\n‚Ä¶ –∏ –µ—â—ë {}".format(ref_count - max_items) if ref_count > max_items else ""
        text = (
            f"ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>\n\n"
            f"–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ (–≤—Å–µ–≥–æ): {total_ref_earned:.2f} RUB\n\n"
            + ("\n".join(lines) if lines else "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
            + more_suffix
        )
        # –ö–Ω–æ–ø–∫–∏: –Ω–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_view_user_{user_id}")
        kb.button(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="admin_menu")
        kb.adjust(1, 1)
        try:
            await callback.message.edit_text(text, reply_markup=kb.as_markup())
        except Exception:
            await callback.message.answer(text, reply_markup=kb.as_markup())

    @admin_router.callback_query(F.data.startswith("admin_edit_key_"))
    async def admin_edit_key(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            key_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç key_id")
            return
        key = rw_repo.get_key_by_id(key_id)
        if not key:
            await callback.message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        text = (
            f"üîë <b>–ö–ª—é—á #{key_id}</b>\n"
            f"–•–æ—Å—Ç: {key.get('host_name') or '‚Äî'}\n"
            f"Email: {key.get('key_email') or '‚Äî'}\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {key.get('expiry_date') or '‚Äî'}\n"
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=keyboards.create_admin_key_actions_keyboard(key_id, int(key.get('user_id')) if key and key.get('user_id') else None)
            )
        except Exception as e:
            logger.debug(f"edit_text failed in delete cancel for key #{key_id}: {e}")
            await callback.message.answer(
                text,
                reply_markup=keyboards.create_admin_key_actions_keyboard(key_id, int(key.get('user_id')) if key and key.get('user_id') else None)
            )

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (prompt) ---
    # –ú–∞—Ç—á–∏–º —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç admin_key_delete_{id}, –±–µ–∑ confirm/cancel
    @admin_router.callback_query(F.data.regexp(r"^admin_key_delete_\d+$"))
    async def admin_key_delete_prompt(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        logger.info(f"admin_key_delete_prompt received: data='{callback.data}' from {callback.from_user.id}")
        try:
            key_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç key_id")
            return
        key = rw_repo.get_key_by_id(key_id)
        if not key:
            await callback.message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        email = key.get('key_email') or '‚Äî'
        host = key.get('host_name') or '‚Äî'
        try:
            await callback.message.edit_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á #{key_id}?\nEmail: {email}\n–°–µ—Ä–≤–µ—Ä: {host}",
                reply_markup=keyboards.create_admin_delete_key_confirm_keyboard(key_id)
            )
        except Exception as e:
            logger.debug(f"edit_text failed in delete prompt for key #{key_id}: {e}")
            await callback.message.answer(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á #{key_id}?\nEmail: {email}\n–°–µ—Ä–≤–µ—Ä: {host}",
                reply_markup=keyboards.create_admin_delete_key_confirm_keyboard(key_id)
            )

    # --- –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ ---
    class AdminExtendSingleKey(StatesGroup):
        waiting_days = State()

    @admin_router.callback_query(F.data.startswith("admin_key_extend_"))
    async def admin_key_extend_prompt(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            key_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç key_id")
            return
        await state.update_data(extend_key_id=key_id)
        await state.set_state(AdminExtendSingleKey.waiting_days)
        await callback.message.edit_text(
            f"–£–∫–∞–∂–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á #{key_id} (—á–∏—Å–ª–æ):",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminExtendSingleKey.waiting_days)
    async def admin_key_extend_process(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        data = await state.get_data()
        key_id = int(data.get("extend_key_id", 0))
        if not key_id:
            await state.clear()
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á.")
            return
        try:
            days = int((message.text or '').strip())
        except Exception:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
            return
        if days <= 0:
            await message.answer("‚ùå –î–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        key = rw_repo.get_key_by_id(key_id)
        if not key:
            await message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        host = key.get('host_name')
        email = key.get('key_email')
        if not host or not email:
            await message.answer("‚ùå –£ –∫–ª—é—á–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ email")
            await state.clear()
            return
        # –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ —Ö–æ—Å—Ç–µ
        try:
            resp = await create_or_update_key_on_host(host, email, days_to_add=days)
        except Exception as e:
            logger.error(f"Admin key extend: host update failed for key #{key_id}: {e}")
            resp = None
        if not resp or not resp.get('client_uuid') or not resp.get('expiry_timestamp_ms'):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            return
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        if not rw_repo.update_key(
            key_id,
            remnawave_user_uuid=resp['client_uuid'],
            expire_at_ms=int(resp['expiry_timestamp_ms']),
        ):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ.")
            return
        await state.clear()
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª—é—á–∞
        new_key = rw_repo.get_key_by_id(key_id)
        text = (
            f"üîë <b>–ö–ª—é—á #{key_id}</b>\n"
            f"–•–æ—Å—Ç: {new_key.get('host_name') or '‚Äî'}\n"
            f"Email: {new_key.get('key_email') or '‚Äî'}\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {new_key.get('expiry_date') or '‚Äî'}\n"
        )
        await message.answer(f"‚úÖ –ö–ª—é—á –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {days} –¥–Ω.")
        await message.answer(text, reply_markup=keyboards.create_admin_key_actions_keyboard(key_id, int(new_key.get('user_id')) if new_key and new_key.get('user_id') else None))

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ---
    class AdminAddAdmin(StatesGroup):
        waiting_for_input = State()

    @admin_router.callback_query(F.data == "admin_add_admin")
    async def admin_add_admin_entry(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await state.set_state(AdminAddAdmin.waiting_for_input)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ @username, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 123456789 –∏–ª–∏ @username",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminAddAdmin.waiting_for_input)
    async def admin_add_admin_process(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        raw = (message.text or '').strip()
        target_id: int | None = None
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
        if raw.isdigit():
            try:
                target_id = int(raw)
            except Exception:
                target_id = None
        # –ï—Å–ª–∏ @username
        if target_id is None and raw.startswith('@'):
            uname = raw.lstrip('@')
            # 1) –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–Ω–æ (@username)
            try:
                chat = await message.bot.get_chat(raw)
                target_id = int(chat.id)
            except Exception:
                target_id = None
            # 2) –ü—Ä–æ–±—É–µ–º –±–µ–∑ @ (username)
            if target_id is None:
                try:
                    chat = await message.bot.get_chat(uname)
                    target_id = int(chat.id)
                except Exception:
                    target_id = None
            # 3) –§–æ–ª–±—ç–∫: –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –ø–æ username
            if target_id is None:
                try:
                    users = get_all_users() or []
                    uname_low = uname.lower()
                    for u in users:
                        u_un = (u.get('username') or '').lstrip('@').lower()
                        if u_un and u_un == uname_low:
                            target_id = int(u.get('telegram_id') or u.get('user_id') or u.get('id'))
                            break
                except Exception:
                    target_id = None
        if target_id is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID/username. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤
        try:
            from shop_bot.data_manager.remnawave_repository import get_admin_ids, update_setting
            ids = set(get_admin_ids())
            ids.add(int(target_id))
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ admin_telegram_ids —Å—Ç—Ä–æ–∫–æ–π CSV
            ids_str = ",".join(str(i) for i in sorted(ids))
            update_setting("admin_telegram_ids", ids_str)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        await state.clear()
        # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é —Å–Ω–æ–≤–∞
        try:
            await show_admin_menu(message)
        except Exception:
            pass

    # --- –°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
    class AdminRemoveAdmin(StatesGroup):
        waiting_for_input = State()

    @admin_router.callback_query(F.data == "admin_remove_admin")
    async def admin_remove_admin_entry(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await state.set_state(AdminRemoveAdmin.waiting_for_input)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ @username, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–Ω—è—Ç—å –∏–∑ –∞–¥–º–∏–Ω–æ–≤:\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 123456789 –∏–ª–∏ @username",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminRemoveAdmin.waiting_for_input)
    async def admin_remove_admin_process(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        raw = (message.text or '').strip()
        target_id: int | None = None
        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
        if raw.isdigit():
            try:
                target_id = int(raw)
            except Exception:
                target_id = None
        # –†–µ–∑–æ–ª–≤–∏–º username (@username –∏–ª–∏ username)
        if target_id is None:
            uname = raw.lstrip('@')
            # 1) –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –≤–≤–µ–¥–µ–Ω–æ
            try:
                chat = await message.bot.get_chat(raw)
                target_id = int(chat.id)
            except Exception:
                target_id = None
            # 2) –ü—Ä–æ–±—É–µ–º –±–µ–∑ @
            if target_id is None and uname:
                try:
                    chat = await message.bot.get_chat(uname)
                    target_id = int(chat.id)
                except Exception:
                    target_id = None
            # 3) –§–æ–ª–±—ç–∫: –ø–æ–∏—Å–∫ –≤ –ë–î
            if target_id is None and uname:
                try:
                    users = get_all_users() or []
                    uname_low = uname.lower()
                    for u in users:
                        u_un = (u.get('username') or '').lstrip('@').lower()
                        if u_un and u_un == uname_low:
                            target_id = int(u.get('telegram_id') or u.get('user_id') or u.get('id'))
                            break
                except Exception:
                    target_id = None
        if target_id is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID/username. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤
        try:
            from shop_bot.data_manager.remnawave_repository import get_admin_ids, update_setting
            ids = set(get_admin_ids())
            if target_id not in ids:
                await message.answer(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                await state.clear()
                try:
                    await show_admin_menu(message)
                except Exception:
                    pass
                return
            if len(ids) <= 1:
                await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            ids.discard(int(target_id))
            ids_str = ",".join(str(i) for i in sorted(ids))
            update_setting("admin_telegram_ids", ids_str)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        await state.clear()
        # –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é —Å–Ω–æ–≤–∞
        try:
            await show_admin_menu(message)
        except Exception:
            pass

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞: –æ—Ç–º–µ–Ω–∞ ---
    @admin_router.callback_query(F.data.startswith("admin_key_delete_cancel_"))
    async def admin_key_delete_cancel(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        try:
            await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        except Exception:
            pass
        logger.info(f"admin_key_delete_cancel received: data='{callback.data}' from {callback.from_user.id}")
        try:
            key_id = int(callback.data.split("_")[-1])
        except Exception:
            return
        key = rw_repo.get_key_by_id(key_id)
        if not key:
            return
        text = (
            f"üîë <b>–ö–ª—é—á #{key_id}</b>\n"
            f"–•–æ—Å—Ç: {key.get('host_name') or '‚Äî'}\n"
            f"Email: {key.get('key_email') or '‚Äî'}\n"
            f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {key.get('expiry_date') or '‚Äî'}\n"
        )
        try:
            await callback.message.edit_text(
                text,
                reply_markup=keyboards.create_admin_key_actions_keyboard(key_id, int(key.get('user_id')) if key and key.get('user_id') else None)
            )
        except Exception as e:
            logger.debug(f"edit_text failed in delete cancel for key #{key_id}: {e}")
            await callback.message.answer(
                text,
                reply_markup=keyboards.create_admin_key_actions_keyboard(key_id, int(key.get('user_id')) if key and key.get('user_id') else None)
            )

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ---
    @admin_router.callback_query(F.data.startswith("admin_key_delete_confirm_"))
    async def admin_key_delete_confirm(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        try:
            await callback.answer("–£–¥–∞–ª—è—é‚Ä¶")
        except Exception:
            pass
        logger.info(f"admin_key_delete_confirm received: data='{callback.data}' from {callback.from_user.id}")
        try:
            key_id = int(callback.data.split('_')[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç key_id")
            return
        try:
            key = rw_repo.get_key_by_id(key_id)
        except Exception as e:
            logger.error(f"DB get_key_by_id failed for #{key_id}: {e}")
            key = None
        if not key:
            await callback.message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        try:
            user_id = int(key.get('user_id'))
        except Exception as e:
            logger.error(f"Invalid user_id for key #{key_id}: {key.get('user_id')}, err={e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            return
        host = key.get('host_name')
        email = key.get('key_email')
        ok_host = True
        if host and email:
            try:
                ok_host = await delete_client_on_host(host, email)
            except Exception as e:
                ok_host = False
                logger.error(f"Failed to delete client on host '{host}' for key #{key_id}: {e}")
        ok_db = False
        try:
            ok_db = delete_key_by_email(email)
        except Exception as e:
            logger.error(f"Failed to delete key in DB for email '{email}': {e}")
        if ok_db:
            await callback.message.answer("‚úÖ –ö–ª—é—á —É–¥–∞–ª—ë–Ω" + (" (—Å —Ö–æ—Å—Ç–∞ —Ç–æ–∂–µ)" if ok_host else " (–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞ —Ö–æ—Å—Ç–µ –Ω–µ —É–¥–∞–ª–æ—Å—å)"))
            # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keys = get_keys_for_user(user_id)
            try:
                await callback.message.edit_text(
                    f"üîë –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
                    reply_markup=keyboards.create_admin_user_keys_keyboard(user_id, keys)
                )
            except Exception as e:
                logger.debug(f"edit_text failed in delete confirm list refresh for user {user_id}: {e}")
                await callback.message.answer(
                    f"üîë –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
                    reply_markup=keyboards.create_admin_user_keys_keyboard(user_id, keys)
                )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è)
            try:
                await callback.bot.send_message(
                    user_id,
                    "‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=keyboards.create_support_keyboard()
                )
            except Exception:
                pass
        else:
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    class AdminEditKeyEmail(StatesGroup):
        waiting_for_email = State()

    @admin_router.callback_query(F.data.startswith("admin_key_edit_email_"))
    async def admin_key_edit_email_start(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            key_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç key_id")
            return
        await state.update_data(edit_key_id=key_id)
        await state.set_state(AdminEditKeyEmail.waiting_for_email)
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –¥–ª—è –∫–ª—é—á–∞ #{key_id}",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminEditKeyEmail.waiting_for_email)
    async def admin_key_edit_email_commit(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        data = await state.get_data()
        key_id = int(data.get('edit_key_id'))
        new_email = (message.text or '').strip()
        if not new_email:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")
            return
        ok = update_key_email(key_id, new_email)
        if ok:
            await message.answer("‚úÖ Email –æ–±–Ω–æ–≤–ª—ë–Ω")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å email (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–Ω—è—Ç)")
        await state.clear()

    class AdminEditKeyHost(StatesGroup):
        waiting_for_host = State()

    @admin_router.callback_query(F.data.startswith("admin_key_edit_host_"))
    async def admin_key_edit_host_start(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            key_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç key_id")
            return
        await state.update_data(edit_key_id=key_id)
        await state.set_state(AdminEditKeyHost.waiting_for_host)
        await callback.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ (host) –¥–ª—è –∫–ª—é—á–∞ #{key_id}",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminEditKeyHost.waiting_for_host)
    async def admin_key_edit_host_commit(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        data = await state.get_data()
        key_id = int(data.get('edit_key_id'))
        new_host = (message.text or '').strip()
        if not new_host:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞")
            return
        ok = rw_repo.update_key(key_id, host_name=new_host)
        if ok:
            await message.answer("‚úÖ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        await state.clear()

    # --- –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ. –±–∞–ª–∞–Ω—Å–∞: —É–¥–∞–ª–µ–Ω–æ ---

    # --- –í—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –∫–ª—é—á–∞ ---
    class AdminGiftKey(StatesGroup):
        picking_user = State()
        picking_host = State()
        picking_days = State()

    @admin_router.callback_query(F.data == "admin_gift_key")
    async def admin_gift_key_entry(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        users = get_all_users()
        await state.clear()
        await state.set_state(AdminGiftKey.picking_user)
        await callback.message.edit_text(
            "üéÅ –í—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –∫–ª—é—á–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.create_admin_users_pick_keyboard(users, page=0, action="gift")
        )

    # –ó–∞–ø—É—Å–∫ –≤—ã–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–∞ —Å—Ä–∞–∑—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @admin_router.callback_query(F.data.startswith("admin_gift_key_"))
    async def admin_gift_key_for_user(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        await state.clear()
        await state.update_data(target_user_id=user_id)
        hosts = get_all_hosts()
        await state.set_state(AdminGiftKey.picking_host)
        await callback.message.edit_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=keyboards.create_admin_hosts_pick_keyboard(hosts, action="gift")
        )

    @admin_router.callback_query(AdminGiftKey.picking_user, F.data.startswith("admin_gift_pick_user_page_"))
    async def admin_gift_pick_user_page(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            page = int(callback.data.split("_")[-1])
        except Exception:
            page = 0
        users = get_all_users()
        await callback.message.edit_text(
            "üéÅ –í—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –∫–ª—é—á–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.create_admin_users_pick_keyboard(users, page=page, action="gift")
        )

    @admin_router.callback_query(AdminGiftKey.picking_user, F.data.startswith("admin_gift_pick_user_"))
    async def admin_gift_pick_user(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        await state.update_data(target_user_id=user_id)
        hosts = get_all_hosts()
        await state.set_state(AdminGiftKey.picking_host)
        await callback.message.edit_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=keyboards.create_admin_hosts_pick_keyboard(hosts, action="gift")
        )

    @admin_router.callback_query(AdminGiftKey.picking_host, F.data == "admin_gift_back_to_users")
    async def admin_gift_back_to_users(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        users = get_all_users()
        await state.set_state(AdminGiftKey.picking_user)
        await callback.message.edit_text(
            "üéÅ –í—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –∫–ª—é—á–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.create_admin_users_pick_keyboard(users, page=0, action="gift")
        )

    @admin_router.callback_query(AdminGiftKey.picking_host, F.data.startswith("admin_gift_pick_host_"))
    async def admin_gift_pick_host(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        host_name = callback.data.split("admin_gift_pick_host_")[-1]
        await state.update_data(host_name=host_name)
        await state.set_state(AdminGiftKey.picking_days)
        await callback.message.edit_text(
            f"üåç –°–µ—Ä–≤–µ—Ä: {host_name}. –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ –¥–Ω—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.callback_query(AdminGiftKey.picking_days, F.data == "admin_gift_back_to_hosts")
    async def admin_gift_back_to_hosts(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        data = await state.get_data()
        user_id = int(data.get('target_user_id'))
        hosts = get_all_hosts()
        await state.set_state(AdminGiftKey.picking_host)
        await callback.message.edit_text(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:",
            reply_markup=keyboards.create_admin_hosts_pick_keyboard(hosts, action="gift")
        )
    @admin_router.message(AdminGiftKey.picking_days)
    async def admin_gift_pick_days(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        data = await state.get_data()
        user_id = int(data.get('target_user_id'))
        host_name = data.get('host_name')
        try:
            days = int(message.text.strip())
        except Exception:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π")
            return
        if days <= 0:
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            return
        # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω. email
        user = get_user(user_id) or {}
        username = (user.get('username') or f'user{user_id}').lower()
        username_slug = re.sub(r"[^a-z0-9._-]", "_", username).strip("_")[:16] or f"user{user_id}"
        base_local = f"gift_{username_slug}"
        candidate_local = base_local
        attempt = 1
        while True:
            candidate_email = f"{candidate_local}@bot.local"
            existing = rw_repo.get_key_by_email(candidate_email)
            if not existing:
                break
            attempt += 1
            candidate_local = f"{base_local}-{attempt}"
            if attempt > 100:
                candidate_local = f"{base_local}-{int(time.time())}"
                candidate_email = f"{candidate_local}@bot.local"
                break
        generated_email = candidate_email

        # –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Ö–æ—Å—Ç–µ —Å days_to_add
        try:
            host_resp = await create_or_update_key_on_host(host_name, generated_email, days_to_add=days)
        except Exception as e:
            host_resp = None
            logging.error(f"Gift flow: failed to create client on host '{host_name}' for user {user_id}: {e}")

        if not host_resp or not host_resp.get("client_uuid") or not host_resp.get("expiry_timestamp_ms"):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ Remnawave.")
            await state.clear()
            await show_admin_menu(message)
            return

        client_uuid = host_resp["client_uuid"]
        expiry_ms = int(host_resp["expiry_timestamp_ms"])  # –≤ –º—Å
        connection_link = host_resp.get("connection_string")

        key_id = rw_repo.record_key_from_payload(
            user_id=user_id,
            payload=host_resp,
            host_name=host_name,
        )
        if key_id:
            username_readable = (user.get('username') or '').strip()
            user_part = f"{user_id} (@{username_readable})" if username_readable else f"{user_id}"
            text_admin = (
                f"‚úÖ üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–ª—é—á #{key_id} –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_part} (—Å–µ—Ä–≤–µ—Ä: {host_name}, {days} –¥–Ω.)\n"
                f"Email: {generated_email}"
            )
            await message.answer(text_admin)
            try:
                notify_text = (
                    f"üéÅ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –∫–ª—é—á #{key_id}\n"
                    f"–°–µ—Ä–≤–µ—Ä: {host_name}\n"
                    f"–°—Ä–æ–∫: {days} –¥–Ω.\n"
                )
                if connection_link:
                    cs = html_escape.escape(connection_link)
                    notify_text += f"\nüîó –ü–æ–¥–ø–∏—Å–∫–∞:\n<pre><code>{cs}</code></pre>"
                await message.bot.send_message(user_id, notify_text, parse_mode='HTML', disable_web_page_preview=True)
            except Exception:
                pass
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        await show_admin_menu(message)

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –≤—ã–¥–∞—á–∏ –∫–ª—é—á–∞

    # --- –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ---
    class AdminMainRefill(StatesGroup):
        waiting_for_pair = State()
        waiting_for_amount = State()

    @admin_router.callback_query(F.data == "admin_add_balance")
    async def admin_add_balance_entry(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        users = get_all_users()
        await callback.message.edit_text(
            "‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.create_admin_users_pick_keyboard(users, page=0, action="add_balance")
        )

    @admin_router.callback_query(F.data.startswith("admin_add_balance_"))
    async def admin_add_balance_user(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        await state.update_data(target_user_id=user_id)
        await state.set_state(AdminMainRefill.waiting_for_amount)
        await callback.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    @admin_router.callback_query(F.data.startswith("admin_add_balance_pick_user_page_"))
    async def admin_add_balance_pick_user_page(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            page = int(callback.data.split("_")[-1])
        except Exception:
            page = 0
        users = get_all_users()
        await callback.message.edit_text(
            "‚ûï –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.create_admin_users_pick_keyboard(users, page=page, action="add_balance")
        )

    # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: –¥–∞–ª—å—à–µ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å—É–º–º—É
    @admin_router.callback_query(F.data.startswith("admin_add_balance_pick_user_"))
    async def admin_add_balance_pick_user(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        await state.update_data(target_user_id=user_id)
        await state.set_state(AdminMainRefill.waiting_for_amount)
        await callback.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminMainRefill.waiting_for_amount)
    async def handle_main_amount(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        data = await state.get_data()
        user_id = int(data.get('target_user_id'))
        try:
            amount = float(message.text.strip().replace(',', '.'))
        except Exception:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö")
            return
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            return
        try:
            ok = add_to_balance(user_id, amount)
            if ok:
                await message.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} RUB –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                try:
                    await message.bot.send_message(user_id, f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} RUB –Ω–∞ –±–∞–ª–∞–Ω—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                except Exception:
                    pass
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ë–î")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {e}")
        await state.clear()
        await show_admin_menu(message)

    # Back from key actions to keys list
    @admin_router.callback_query(F.data.startswith("admin_key_back_"))
    async def admin_key_back(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            key_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç key_id")
            return
        key = rw_repo.get_key_by_id(key_id)
        if not key:
            await callback.message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª—é—á–µ–π —Ö–æ—Å—Ç–∞ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–ª—é—á–µ–π —ç—Ç–æ–≥–æ —Ö–æ—Å—Ç–∞
        host_from_state = None
        try:
            data = await state.get_data()
            host_from_state = (data or {}).get('hostkeys_host')
        except Exception:
            host_from_state = None

        if host_from_state:
            host_name = host_from_state
            keys = get_keys_for_host(host_name)
            await callback.message.edit_text(
                f"üîë –ö–ª—é—á–∏ –Ω–∞ —Ö–æ—Å—Ç–µ {host_name}:",
                reply_markup=keyboards.create_admin_keys_for_host_keyboard(host_name, keys)
            )
        else:
            user_id = int(key.get('user_id'))
            keys = get_keys_for_user(user_id)
            await callback.message.edit_text(
                f"üîë –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
                reply_markup=keyboards.create_admin_user_keys_keyboard(user_id, keys)
            )

    # noop callback to safely ignore placeholder buttons
    @admin_router.callback_query(F.data == "noop")
    async def admin_noop(callback: types.CallbackQuery):
        await callback.answer()

    @admin_router.callback_query(F.data == "admin_cancel")
    async def admin_cancel_handler(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await show_admin_menu(callback.message, edit_message=True)

    # --- –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (UI) ---
    class AdminMainDeduct(StatesGroup):
        waiting_for_amount = State()

    # –í—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–º–µ–Ω—é: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @admin_router.callback_query(F.data == "admin_deduct_balance")
    async def admin_deduct_balance_entry(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        users = get_all_users()
        await callback.message.edit_text(
            "‚ûñ –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.create_admin_users_pick_keyboard(users, page=0, action="deduct_balance")
        )

    # –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @admin_router.callback_query(F.data.startswith("admin_deduct_balance_"))
    async def admin_deduct_balance_user(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        await state.update_data(target_user_id=user_id)
        await state.set_state(AdminMainDeduct.waiting_for_amount)
        await callback.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @admin_router.callback_query(F.data.startswith("admin_deduct_balance_pick_user_page_"))
    async def admin_deduct_balance_pick_user_page(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            page = int(callback.data.split("_")[-1])
        except Exception:
            page = 0
        users = get_all_users()
        await callback.message.edit_text(
            "‚ûñ –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboards.create_admin_users_pick_keyboard(users, page=page, action="deduct_balance")
        )

    # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –≤–≤–æ–¥ —Å—É–º–º—ã
    @admin_router.callback_query(F.data.startswith("admin_deduct_balance_pick_user_"))
    async def admin_deduct_balance_pick_user(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        try:
            user_id = int(callback.data.split("_")[-1])
        except Exception:
            await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
            return
        await state.update_data(target_user_id=user_id)
        await state.set_state(AdminMainDeduct.waiting_for_amount)
        await callback.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminMainDeduct.waiting_for_amount)
    async def handle_deduct_amount(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        data = await state.get_data()
        user_id = int(data.get('target_user_id'))
        try:
            amount = float(message.text.strip().replace(',', '.'))
        except Exception:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö")
            return
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
            return
        try:
            ok = deduct_from_balance(user_id, amount)
            if ok:
                await message.answer(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount:.2f} RUB —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                try:
                    await message.bot.send_message(
                        user_id,
                        f"‚ûñ –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {amount:.2f} RUB –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=keyboards.create_support_keyboard()
                    )
                except Exception:
                    pass
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await state.clear()
        await show_admin_menu(message)

    # --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–µ–π –Ω–∞ —Ö–æ—Å—Ç–µ ---
    class AdminHostKeys(StatesGroup):
        picking_host = State()

    @admin_router.callback_query(F.data == "admin_host_keys")
    async def admin_host_keys_entry(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await state.clear()
        await state.set_state(AdminHostKeys.picking_host)
        hosts = get_all_hosts()
        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª—é—á–µ–π:",
            reply_markup=keyboards.create_admin_hosts_pick_keyboard(hosts, action="hostkeys")
        )

    @admin_router.callback_query(AdminHostKeys.picking_host, F.data.startswith("admin_hostkeys_pick_host_"))
    async def admin_host_keys_pick_host(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        host_name = callback.data.split("admin_hostkeys_pick_host_")[-1]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ—Å—Ç–∞, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        try:
            await state.update_data(hostkeys_host=host_name)
        except Exception:
            pass
        keys = get_keys_for_host(host_name)
        await callback.message.edit_text(
            f"üîë –ö–ª—é—á–∏ –Ω–∞ —Ö–æ—Å—Ç–µ {host_name}:",
            reply_markup=keyboards.create_admin_keys_for_host_keyboard(host_name, keys)
        )

    @admin_router.callback_query(AdminHostKeys.picking_host, F.data == "admin_hostkeys_back_to_hosts")
    async def admin_hostkeys_back_to_hosts(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
        try:
            await state.update_data(hostkeys_host=None)
        except Exception:
            pass
        hosts = get_all_hosts()
        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª—é—á–µ–π:",
            reply_markup=keyboards.create_admin_hosts_pick_keyboard(hosts, action="hostkeys")
        )

    @admin_router.callback_query(F.data == "admin_hostkeys_back_to_users")
    async def admin_hostkeys_back_to_users(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await show_admin_menu(callback.message, edit_message=True)

    # --- –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ ID/Email ---
    class AdminQuickDeleteKey(StatesGroup):
        waiting_for_identifier = State()

    @admin_router.callback_query(F.data == "admin_delete_key")
    async def admin_delete_key_entry(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await state.set_state(AdminQuickDeleteKey.waiting_for_identifier)
        await callback.message.edit_text(
            "üóë –í–≤–µ–¥–∏—Ç–µ <code>key_id</code> –∏–ª–∏ <code>email</code> –∫–ª—é—á–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminQuickDeleteKey.waiting_for_identifier)
    async def admin_delete_key_process(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        text = (message.text or '').strip()
        key = None
        # —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ ID
        try:
            key_id = int(text)
            key = rw_repo.get_key_by_id(key_id)
        except Exception:
            # –∑–∞—Ç–µ–º –∫–∞–∫ email
            key = rw_repo.get_key_by_email(text)
        if not key:
            await message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π key_id –∏–ª–∏ email.")
            return
        key_id = int(key.get('key_id'))
        email = key.get('key_email') or '‚Äî'
        host = key.get('host_name') or '‚Äî'
        await state.clear()
        await message.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ #{key_id}\nEmail: {email}\n–°–µ—Ä–≤–µ—Ä: {host}",
            reply_markup=keyboards.create_admin_delete_key_confirm_keyboard(key_id)
        )

    # --- –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –Ω–∞ N –¥–Ω–µ–π ---
    class AdminExtendKey(StatesGroup):
        waiting_for_pair = State()

    @admin_router.callback_query(F.data == "admin_extend_key")
    async def admin_extend_key_entry(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await state.set_state(AdminExtendKey.waiting_for_pair)
        await callback.message.edit_text(
            "‚ûï –í–≤–µ–¥–∏—Ç–µ: <code>key_id –¥–Ω–∏</code> (—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–ª—é—á—É)",
            reply_markup=keyboards.create_admin_cancel_keyboard()
        )

    @admin_router.message(AdminExtendKey.waiting_for_pair)
    async def admin_extend_key_process(message: types.Message, state: FSMContext):
        if not is_admin(message.from_user.id):
            return
        parts = (message.text or '').strip().split()
        if len(parts) != 2:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: <code>key_id –¥–Ω–∏</code>")
            return
        try:
            key_id = int(parts[0])
            days = int(parts[1])
        except Exception:
            await message.answer("‚ùå –û–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return
        if days <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            return
        key = rw_repo.get_key_by_id(key_id)
        if not key:
            await message.answer("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        host = key.get('host_name')
        email = key.get('key_email')
        if not host or not email:
            await message.answer("‚ùå –£ –∫–ª—é—á–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ—Å—Ç–µ –∏–ª–∏ email")
            return
        # –û–±–Ω–æ–≤–∏–º –Ω–∞ —Ö–æ—Å—Ç–µ
        resp = None
        try:
            resp = await create_or_update_key_on_host(host, email, days_to_add=days)
        except Exception as e:
            logger.error(f"Extend flow: failed to update client on host '{host}' for key #{key_id}: {e}")
        if not resp or not resp.get('client_uuid') or not resp.get('expiry_timestamp_ms'):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            return
        # –û–±–Ω–æ–≤–∏–º –≤ –ë–î
        if not rw_repo.update_key(
            key_id,
            remnawave_user_uuid=resp['client_uuid'],
            expire_at_ms=int(resp['expiry_timestamp_ms']),
        ):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ.")
            return
        await state.clear()
        await message.answer(f"‚úÖ –ö–ª—é—á #{key_id} –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {days} –¥–Ω.")
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.bot.send_message(int(key.get('user_id')), f"‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥–ª–∏–ª –≤–∞—à –∫–ª—é—á #{key_id} –Ω–∞ {days} –¥–Ω.")
        except Exception:
            pass

    @admin_router.callback_query(F.data == "start_broadcast")
    async def start_broadcast_handler(callback: types.CallbackQuery, state: FSMContext):
        if not is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
            return
        await callback.answer()
        await callback.message.edit_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>).\n"
            "–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n",
            reply_markup=keyboards.create_broadcast_cancel_keyboard()
        )
        await state.set_state(Broadcast.waiting_for_message)

    @admin_router.message(Broadcast.waiting_for_message)
    async def broadcast_message_received_handler(message: types.Message, state: FSMContext):
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        await state.update_data(message_to_send=message.model_dump_json())
        await message.answer(
            "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–º—É –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π?",
            reply_markup=keyboards.create_broadcast_options_keyboard()
        )
        await state.set_state(Broadcast.waiting_for_button_option)

    @admin_router.callback_query(Broadcast.waiting_for_button_option, F.data == "broadcast_add_button")
    async def add_button_prompt_handler(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer()
        await callback.message.edit_text(
            "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏.",
            reply_markup=keyboards.create_broadcast_cancel_keyboard()
        )
        await state.set_state(Broadcast.waiting_for_button_text)

    @admin_router.message(Broadcast.waiting_for_button_text)
    async def button_text_received_handler(message: types.Message, state: FSMContext):
        await state.update_data(button_text=message.text)
        await message.answer(
            "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (URL), –∫—É–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏.",
            reply_markup=keyboards.create_broadcast_cancel_keyboard()
        )
        await state.set_state(Broadcast.waiting_for_button_url)

    @admin_router.message(Broadcast.waiting_for_button_url)
    async def button_url_received_handler(message: types.Message, state: FSMContext, bot: Bot):
        url_to_check = message.text
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã. –î–∞–ª—å–Ω–µ–π—à—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        if not (url_to_check.startswith("http://") or url_to_check.startswith("https://")):
            await message.answer(
                "‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        await state.update_data(button_url=url_to_check)
        await show_broadcast_preview(message, state, bot)

    @admin_router.callback_query(Broadcast.waiting_for_button_option, F.data == "broadcast_skip_button")
    async def skip_button_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
        await callback.answer()
        await state.update_data(button_text=None, button_url=None)
        await show_broadcast_preview(callback.message, state, bot)

    async def show_broadcast_preview(message: types.Message, state: FSMContext, bot: Bot):
        data = await state.get_data()
        message_json = data.get('message_to_send')
        original_message = types.Message.model_validate_json(message_json)

        button_text = data.get('button_text')
        button_url = data.get('button_url')

        preview_keyboard = None
        if button_text and button_url:
            builder = InlineKeyboardBuilder()
            builder.button(text=button_text, url=button_url)
            preview_keyboard = builder.as_markup()

        await message.answer(
            "–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?",
            reply_markup=keyboards.create_broadcast_confirmation_keyboard()
        )

        await bot.copy_message(
            chat_id=message.chat.id,
            from_chat_id=original_message.chat.id,
            message_id=original_message.message_id,
            reply_markup=preview_keyboard
        )

        await state.set_state(Broadcast.waiting_for_confirmation)

    @admin_router.callback_query(Broadcast.waiting_for_confirmation, F.data == "confirm_broadcast")
    async def confirm_broadcast_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
        await callback.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")

        data = await state.get_data()
        message_json = data.get('message_to_send')
        original_message = types.Message.model_validate_json(message_json)

        button_text = data.get('button_text')
        button_url = data.get('button_url')

        final_keyboard = None
        if button_text and button_url:
            builder = InlineKeyboardBuilder()
            builder.button(text=button_text, url=button_url)
            final_keyboard = builder.as_markup()

        await state.clear()

        users = get_all_users()
        logger.info(f"Broadcast: Starting to iterate over {len(users)} users.")

        sent_count = 0
        failed_count = 0
        banned_count = 0

        for user in users:
            user_id = user['telegram_id']
            if user.get('is_banned'):
                banned_count += 1
                continue
            try:
                await bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=original_message.chat.id,
                    message_id=original_message.message_id,
                    reply_markup=final_keyboard
                )
                sent_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                failed_count += 1
                logger.warning(f"Failed to send broadcast message to user {user_id}: {e}")

        await callback.message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"üëé –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}\n"
            f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∑–∞–±–∞–Ω–µ–Ω—ã): {banned_count}"
        )
        await show_admin_menu(callback.message)

    @admin_router.callback_query(StateFilter(Broadcast), F.data == "cancel_broadcast")
    async def cancel_broadcast_handler(callback: types.CallbackQuery, state: FSMContext):
        await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await show_admin_menu(callback.message, edit_message=True)

    # --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥ ---
    @admin_router.message(Command(commands=["approve_withdraw"]))
    async def approve_withdraw_handler(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        try:
            user_id = int(message.text.split("_")[-1])
            user = get_user(user_id)
            balance = user.get('referral_balance', 0)
            if balance < 100:
                await message.answer("–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–µ 100 —Ä—É–±.")
                return
            set_referral_balance(user_id, 0)
            set_referral_balance_all(user_id, 0)
            await message.answer(f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ {balance:.2f} RUB –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
            await message.bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {balance:.2f} RUB –æ–¥–æ–±—Ä–µ–Ω–∞. –î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    @admin_router.message(Command(commands=["decline_withdraw"]))
    async def decline_withdraw_handler(message: types.Message):
        if not is_admin(message.from_user.id):
            return
        try:
            user_id = int(message.text.split("_")[-1])
            await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            await message.bot.send_message(
                user_id,
                "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")

    return admin_router



