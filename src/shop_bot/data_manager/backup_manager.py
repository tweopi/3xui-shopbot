import logging
import shutil
import sqlite3
import zipfile
from datetime import datetime
from pathlib import Path

from aiogram import Bot
from aiogram.types import FSInputFile

from . import remnawave_repository as rw_repo

logger = logging.getLogger(__name__)

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤ –±—ç–∫–∞–ø–æ–≤
BACKUPS_DIR = Path("/app/project/backups")
BACKUPS_DIR.mkdir(parents=True, exist_ok=True)

# –ò–º—è —Ñ–∞–π–ª–∞ –ë–î —Å–º. –≤ rw_repo.DB_FILE
DB_FILE: Path = rw_repo.DB_FILE


def _timestamp() -> str:
    return datetime.now().strftime("%Y%m%d-%H%M%S")


def create_backup_file() -> Path | None:
    """
    –°–æ–∑–¥–∞—ë—Ç zip-–∞—Ä—Ö–∏–≤ —Å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –∫–æ–ø–∏–µ–π SQLite-–ë–î.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        if not DB_FILE.exists():
            logger.error(f"–ë—ç–∫–∞–ø: —Ñ–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_FILE}")
            return None
        ts = _timestamp()
        tmp_db_copy = BACKUPS_DIR / f"users-{ts}.db"
        zip_path = BACKUPS_DIR / f"db-backup-{ts}.zip"

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ SQLite backup API
        with sqlite3.connect(DB_FILE) as src:
            with sqlite3.connect(tmp_db_copy) as dst:
                src.backup(dst)

        # –£–ø–∞–∫—É–µ–º –≤ zip
        with zipfile.ZipFile(zip_path, 'w', compression=zipfile.ZIP_DEFLATED) as zf:
            zf.write(tmp_db_copy, arcname=tmp_db_copy.name)

        # –£–¥–∞–ª–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é .db
        try:
            tmp_db_copy.unlink(missing_ok=True)
        except Exception:
            pass

        logger.info(f"–ë—ç–∫–∞–ø: —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {zip_path}")
        return zip_path
    except Exception as e:
        logger.error(f"–ë—ç–∫–∞–ø: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤: {e}", exc_info=True)
        return None


def cleanup_old_backups(keep: int = 7) -> None:
    """–•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞—Ä—Ö–∏–≤–æ–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è—Ç—å."""
    try:
        files = sorted(BACKUPS_DIR.glob("db-backup-*.zip"), key=lambda p: p.stat().st_mtime, reverse=True)
        for f in files[keep:]:
            try:
                f.unlink(missing_ok=True)
            except Exception:
                pass
    except Exception as e:
        logger.warning(f"–ë—ç–∫–∞–ø: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã: {e}")


async def send_backup_to_admins(bot: Bot, zip_path: Path) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—Ä—Ö–∏–≤ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫.
    """
    cnt = 0
    try:
        try:
            admin_ids = list(rw_repo.get_admin_ids() or [])
        except Exception:
            admin_ids = []
        if not admin_ids:
            logger.warning("–ë—ç–∫–∞–ø: –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞")
            return 0
        caption = f"üóÑ –ë—ç–∫–∞–ø –ë–î: {zip_path.name}"
        file = FSInputFile(str(zip_path))
        for uid in admin_ids:
            try:
                await bot.send_document(chat_id=int(uid), document=file, caption=caption)
                cnt += 1
            except Exception as e:
                logger.error(f"–ë—ç–∫–∞–ø: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {uid}: {e}")
        return cnt
    except Exception as e:
        logger.error(f"–ë—ç–∫–∞–ø: –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}", exc_info=True)
        return cnt


def validate_db_file(db_path: Path) -> bool:
    """
    –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ë–î: –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.
    """
    try:
        with sqlite3.connect(db_path) as conn:
            cur = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞
            required_tables = {
                'users', 'vpn_keys', 'transactions', 'bot_settings', 'xui_hosts'
            }
            cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
            present = {row[0] for row in cur.fetchall()}
            missing = required_tables - present
            if missing:
                logger.warning(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –ë–î –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing}")
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: users –∏ bot_settings –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
            return 'users' in present and 'bot_settings' in present
    except Exception as e:
        logger.error(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –ë–î: {e}")
        return False


def restore_from_file(uploaded_path: Path) -> bool:
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ë–î –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .db –∏–ª–∏ .zip (–≤–Ω—É—Ç—Ä–∏ .db).
    –î–µ–ª–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–∫–∞—Ç–∞.
    """
    try:
        if not uploaded_path.exists():
            logger.error(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {uploaded_path}")
            return False

        # –†–∞—Å–ø–∞–∫—É–µ–º, –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤
        tmp_dir = BACKUPS_DIR / f"restore-{_timestamp()}"
        tmp_dir.mkdir(parents=True, exist_ok=True)
        candidate_db: Path | None = None

        if uploaded_path.suffix.lower() == '.zip':
            try:
                with zipfile.ZipFile(uploaded_path, 'r') as zf:
                    for n in zf.namelist():
                        if n.lower().endswith('.db'):
                            zf.extract(n, path=tmp_dir)
                            candidate_db = tmp_dir / n
                            break
            except Exception as e:
                logger.error(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤: {e}")
                return False
        else:
            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —ç—Ç–æ .db
            candidate_db = uploaded_path

        if not candidate_db or not candidate_db.exists():
            logger.error("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .db")
            return False

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not validate_db_file(candidate_db):
            logger.error("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ñ–∞–π–ª –ë–î –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É")
            return False

        # –ë—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –ë–î
        backup_before = BACKUPS_DIR / f"before-restore-{_timestamp()}.zip"
        cur_backup = create_backup_file()
        if cur_backup and cur_backup.exists():
            try:
                shutil.copy(cur_backup, backup_before)
            except Exception:
                pass

        # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite backup API –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
        with sqlite3.connect(candidate_db) as src:
            with sqlite3.connect(DB_FILE) as dst:
                src.backup(dst)
        
        # –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        try:
            rw_repo.run_migration()
        except Exception:
            pass

        logger.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return False
