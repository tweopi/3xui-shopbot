import asyncio
import logging

from datetime import datetime, timedelta
from typing import Any

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot

from shop_bot.bot_controller import BotController
from shop_bot.data_manager import database
from shop_bot.data_manager import speedtest_runner
from shop_bot.data_manager import backup_manager

from shop_bot.modules import xui_api
from shop_bot.bot import keyboards

CHECK_INTERVAL_SECONDS = 300
NOTIFY_BEFORE_HOURS = {72, 48, 24, 1}
notified_users = {}

logger = logging.getLogger(__name__)


def _attr_candidates(name: str) -> tuple[str, ...]:
    parts = name.split("_")
    camel = parts[0] + "".join(word.capitalize() for word in parts[1:]) if parts else name
    pascal = camel.capitalize() if camel else camel
    candidates = [name]
    for alias in (camel, pascal):
        if alias and alias not in candidates:
            candidates.append(alias)
    return tuple(candidates)


def _get_client_value(client: Any, name: str, default: Any | None = None) -> Any | None:
    for candidate in _attr_candidates(name):
        try:
            if hasattr(client, candidate):
                value = getattr(client, candidate)
                if value is not None:
                    return value
        except Exception:
            continue
        if isinstance(client, dict) and candidate in client:
            value = client[candidate]
            if value is not None:
                return value
    return default


def _coerce_int(value: Any) -> int | None:
    if value is None:
        return None
    if isinstance(value, bool):
        return int(value)
    if isinstance(value, (int, float)):
        try:
            return int(value)
        except (TypeError, ValueError):
            return None
    if isinstance(value, str):
        raw = value.strip()
        if not raw:
            return None
        if raw.isdigit():
            return int(raw)
        try:
            return int(float(raw))
        except ValueError:
            return None
    return None


def _as_datetime(value: Any) -> datetime | None:
    if value is None:
        return None
    if isinstance(value, datetime):
        return value
    if isinstance(value, (int, float)):
        try:
            ts = float(value)
        except (TypeError, ValueError):
            return None
        if ts > 1e12:
            ts /= 1000
        return datetime.fromtimestamp(ts)
    if isinstance(value, str):
        raw = value.strip()
        if not raw:
            return None
        if raw.isdigit():
            return _as_datetime(int(raw))
        try:
            return datetime.fromisoformat(raw)
        except ValueError:
            return None
    return None


def _parse_remote_expiry(client: Any) -> int:
    expiry_ms = 0
    for field in ("expire_at", "expiry_time"):
        raw = _get_client_value(client, field)
        if raw in (None, ""):
            continue
        dt = _as_datetime(raw)
        if dt:
            expiry_ms = int(dt.timestamp() * 1000)
            break
        raw_int = _coerce_int(raw)
        if raw_int is None:
            continue
        expiry_ms = raw_int if raw_int > 1e12 else (raw_int * 1000 if raw_int > 1e9 else raw_int)
        break

    reset_val = _coerce_int(_get_client_value(client, "reset")) or 0
    if reset_val:
        if reset_val > 1e12:
            expiry_ms = max(expiry_ms, reset_val)
        else:
            expiry_ms += int(reset_val) * 24 * 3600 * 1000

    return int(expiry_ms)

# –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö –≤–∏–¥–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π 3 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏ (–∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤)
SPEEDTEST_INTERVAL_SECONDS = 8 * 3600
_last_speedtests_run_at: datetime | None = None
_last_backup_run_at: datetime | None = None

def format_time_left(hours: int) -> str:
    if hours >= 24:
        days = hours // 24
        if days % 10 == 1 and days % 100 != 11:
            return f"{days} –¥–µ–Ω—å"
        elif 2 <= days % 10 <= 4 and (days % 100 < 10 or days % 100 >= 20):
            return f"{days} –¥–Ω—è"
        else:
            return f"{days} –¥–Ω–µ–π"
    else:
        if hours % 10 == 1 and hours % 100 != 11:
            return f"{hours} —á–∞—Å"
        elif 2 <= hours % 10 <= 4 and (hours % 100 < 10 or hours % 100 >= 20):
            return f"{hours} —á–∞—Å–∞"
        else:
            return f"{hours} —á–∞—Å–æ–≤"

async def send_subscription_notification(bot: Bot, user_id: int, key_id: int, time_left_hours: int, expiry_date: datetime):
    try:
        time_text = format_time_left(time_left_hours)
        expiry_str = expiry_date.strftime('%d.%m.%Y –≤ %H:%M')
        
        message = (
            f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** ‚ö†Ô∏è\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ **{time_text}**.\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: **{expiry_str}**\n\n"
            f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN!"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="manage_keys")
        builder.button(text="‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á", callback_data=f"extend_key_{key_id}")
        builder.adjust(2)
        
        await bot.send_message(chat_id=user_id, text=message, reply_markup=builder.as_markup(), parse_mode='Markdown')
        logger.debug(f"Scheduler: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –∫–ª—é—á—É {key_id} (–æ—Å—Ç–∞–ª–æ—Å—å {time_left_hours} —á).")
        
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

def _cleanup_notified_users(all_db_keys: list[dict]):
    if not notified_users:
        return

    logger.debug("Scheduler: –û—á–∏—â–∞—é –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    active_key_ids = {key['key_id'] for key in all_db_keys}
    
    users_to_check = list(notified_users.keys())
    
    cleaned_users = 0
    cleaned_keys = 0

    for user_id in users_to_check:
        keys_to_check = list(notified_users[user_id].keys())
        for key_id in keys_to_check:
            if key_id not in active_key_ids:
                del notified_users[user_id][key_id]
                cleaned_keys += 1
        
        if not notified_users[user_id]:
            del notified_users[user_id]
            cleaned_users += 1
    
    if cleaned_users > 0 or cleaned_keys > 0:
        logger.debug(f"Scheduler: –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {cleaned_users}, –∫–ª—é—á–µ–π: {cleaned_keys}.")

async def check_expiring_subscriptions(bot: Bot):
    logger.debug("Scheduler: –ü—Ä–æ–≤–µ—Ä—è—é –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
    current_time = datetime.now()
    all_keys = database.get_all_keys()
    
    _cleanup_notified_users(all_keys)
    
    for key in all_keys:
        try:
            expiry_date = datetime.fromisoformat(key['expiry_date'])
            time_left = expiry_date - current_time

            if time_left.total_seconds() < 0:
                continue

            total_hours_left = int(time_left.total_seconds() / 3600)
            user_id = key['user_id']
            key_id = key['key_id']

            for hours_mark in NOTIFY_BEFORE_HOURS:
                if hours_mark - 1 < total_hours_left <= hours_mark:
                    notified_users.setdefault(user_id, {}).setdefault(key_id, set())
                    
                    if hours_mark not in notified_users[user_id][key_id]:
                        await send_subscription_notification(bot, user_id, key_id, hours_mark, expiry_date)
                        notified_users[user_id][key_id].add(hours_mark)
                    break 
                    
        except Exception as e:
            logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ {key.get('key_id')}: {e}")

async def sync_keys_with_panels():
    logger.debug("Scheduler: –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å XUI-–ø–∞–Ω–µ–ª—è–º–∏...")
    total_affected_records = 0
    
    all_hosts = database.get_all_hosts()
    if not all_hosts:
        logger.debug("Scheduler: –•–æ—Å—Ç—ã –≤ –±–∞–∑–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    for host in all_hosts:
        host_name = host['host_name']
        logger.debug(f"Scheduler: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ö–æ—Å—Ç: '{host_name}'")
        
        try:
            api, inbound = xui_api.login_to_host(
                host_url=host['host_url'],
                username=host['host_username'],
                password=host['host_pass'],
                inbound_id=host['host_inbound_id']
            )

            if not api or not inbound:
                logger.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ö–æ—Å—Ç–µ '{host_name}'. –ü—Ä–æ–ø—É—Å–∫–∞—é –µ–≥–æ.")
                continue
            
            full_inbound_details = api.inbound.get_by_id(inbound.id)
            clients_on_server = {client.email: client for client in (full_inbound_details.settings.clients or [])}
            logger.debug(f"Scheduler: –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–∞–Ω–µ–ª–∏ '{host_name}': {len(clients_on_server)}")

            keys_in_db = database.get_keys_for_host(host_name)
            
            for db_key in keys_in_db:
                key_email = db_key['key_email']
                expiry_date = datetime.fromisoformat(db_key['expiry_date'])
                now = datetime.now()
                if expiry_date < now - timedelta(days=5):
                    logger.debug(f"Scheduler: –ö–ª—é—á '{key_email}' –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –±–æ–ª–µ–µ 5 –¥–Ω–µ–π. –£–¥–∞–ª—è—é —Å –ø–∞–Ω–µ–ª–∏ –∏ –∏–∑ –ë–î.")
                    try:
                        await xui_api.delete_client_on_host(host_name, key_email)
                    except Exception as e:
                        logger.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ '{key_email}' —Å –ø–∞–Ω–µ–ª–∏: {e}")
                    deleted = database.delete_key_by_email(key_email)
                    if deleted:
                        total_affected_records += 1
                        logger.debug(f"Scheduler: –ö–ª—é—á '{key_email}' —É–¥–∞–ª—ë–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–Ω–µ–ª–∏.")
                    else:
                        logger.warning(f"Scheduler: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á '{key_email}' –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î ‚Äî –∑–∞–ø–∏—Å–µ–π –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ.")
                    continue

                server_client = clients_on_server.pop(key_email, None)

                if not server_client:
                    local_uuid = str(db_key.get('xui_client_uuid') or "")
                    if local_uuid:
                        for orphan_email, candidate in list(clients_on_server.items()):
                            candidate_uuid = _get_client_value(candidate, "short_uuid") or _get_client_value(candidate, "id")
                            if candidate_uuid and str(candidate_uuid) == local_uuid:
                                server_client = candidate
                                clients_on_server.pop(orphan_email, None)
                                break

                if server_client:
                    server_uuid = _get_client_value(server_client, "short_uuid") or _get_client_value(server_client, "id")
                    local_uuid_val = db_key.get('xui_client_uuid')
                    server_expiry_ms = _parse_remote_expiry(server_client)
                    local_expiry_ms = int(expiry_date.timestamp() * 1000)

                    needs_update = False
                    if server_uuid and local_uuid_val and str(server_uuid) != str(local_uuid_val):
                        needs_update = True
                    if abs(server_expiry_ms - local_expiry_ms) > 1000:
                        needs_update = True

                    if needs_update:
                        database.update_key_status_from_server(key_email, server_client)
                        total_affected_records += 1
                        logger.debug(
                            f"Scheduler: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á '{key_email}' –¥–ª—è —Ö–æ—Å—Ç–∞ '{host_name}' (uuid/expiry –æ–±–Ω–æ–≤–ª–µ–Ω—ã)."
                        )
                else:
                    logger.warning(
                        f"Scheduler: –ö–ª—é—á '{key_email}' –¥–ª—è —Ö–æ—Å—Ç–∞ '{host_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–º–µ—á–∞—é –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î."
                    )
                    database.update_key_status_from_server(key_email, None)
                    total_affected_records += 1

            if clients_on_server:
                # Try to attach orphan clients from panel to local DB so old keys get subscriptions
                for orphan_email, orphan_client in clients_on_server.items():
                    try:
                        # Extract user_id from email like: user12345-key1-...@telegram.bot
                        import re
                        m = re.search(r"user(\d+)", orphan_email)
                        user_id = int(m.group(1)) if m else None
                        if not user_id:
                            logger.warning(
                                f"Scheduler: –ù–∞–π–¥–µ–Ω –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π –∫–ª–∏–µ–Ω—Ç '{orphan_email}' –Ω–∞ '{host_name}', –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é."
                            )
                            continue

                        # Check that user exists
                        usr = database.get_user(user_id)
                        if not usr:
                            logger.warning(
                                f"Scheduler: –û—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π –∫–ª–∏–µ–Ω—Ç '{orphan_email}' —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ user_id={user_id}, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é."
                            )
                            continue

                        # If key already present (race/duplicate), skip insert
                        existing = database.get_key_by_email(orphan_email)
                        if existing:
                            continue

                        expiry_ms = _parse_remote_expiry(orphan_client)
                        client_uuid = (
                            _get_client_value(orphan_client, 'short_uuid')
                            or _get_client_value(orphan_client, 'id')
                            or _get_client_value(orphan_client, 'email')
                            or ''
                        )

                        if not client_uuid:
                            logger.warning(
                                f"Scheduler: –£ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ '{orphan_email}' –Ω–µ—Ç UUID/id ‚Äî –Ω–µ –º–æ–≥—É –ø—Ä–∏–≤—è–∑–∞—Ç—å."
                            )
                            continue

                        new_id = database.add_new_key(
                            user_id=user_id,
                            host_name=host_name,
                            xui_client_uuid=str(client_uuid),
                            key_email=orphan_email,
                            expiry_timestamp_ms=expiry_ms,
                        )
                        if new_id:
                            logger.info(
                                f"Scheduler: –û—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π –∫–ª–∏–µ–Ω—Ç '{orphan_email}' –Ω–∞ '{host_name}' –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∫–∞–∫ key_id={new_id}."
                            )
                            total_affected_records += 1
                        else:
                            logger.warning(
                                f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ—Å–∏—Ä–æ—Ç–µ–≤—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ '{orphan_email}' –Ω–∞ '{host_name}'."
                            )
                    except Exception as e:
                        logger.error(
                            f"Scheduler: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ—Å–∏—Ä–æ—Ç–µ–≤—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ '{orphan_email}' –Ω–∞ '{host_name}': {e}",
                            exc_info=True,
                        )

        except Exception as e:
            logger.error(f"Scheduler: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–æ—Å—Ç–∞ '{host_name}': {e}", exc_info=True)
            
    logger.debug(f"Scheduler: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å XUI-–ø–∞–Ω–µ–ª—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –∑–∞–ø–∏—Å–µ–π: {total_affected_records}.")

async def periodic_subscription_check(bot_controller: BotController):
    logger.info("Scheduler: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.sleep(10)

    while True:
        try:
            await sync_keys_with_panels()

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º —Ö–æ—Å—Ç–∞–º (–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: SSH –∏ —Å–µ—Ç–µ–≤–æ–π)
            await _maybe_run_periodic_speedtests()

            # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–±—ç–∫–∞–ø –ë–î —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–¥–º–∏–Ω–∞–º
            bot = bot_controller.get_bot_instance() if bot_controller.get_status().get("is_running") else None
            if bot:
                await _maybe_run_daily_backup(bot)

            if bot_controller.get_status().get("is_running"):
                bot = bot_controller.get_bot_instance()
                if bot:
                    await check_expiring_subscriptions(bot)
                else:
                    logger.warning("Scheduler: –ë–æ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π, –Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            else:
                logger.debug("Scheduler: –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ–ø—É—â–µ–Ω—ã.")

        except Exception as e:
            logger.error(f"Scheduler: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            
        logger.info(f"Scheduler: –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL_SECONDS} —Å–µ–∫.")
        await asyncio.sleep(CHECK_INTERVAL_SECONDS)

async def _maybe_run_periodic_speedtests():
    global _last_speedtests_run_at
    now = datetime.now()
    if _last_speedtests_run_at and (now - _last_speedtests_run_at).total_seconds() < SPEEDTEST_INTERVAL_SECONDS:
        return
    try:
        await _run_speedtests_for_all_hosts()
        _last_speedtests_run_at = now
    except Exception as e:
        logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ speedtests: {e}", exc_info=True)

async def _run_speedtests_for_all_hosts():
    hosts = database.get_all_hosts()
    if not hosts:
        logger.debug("Scheduler: –ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏.")
        return
    logger.info(f"Scheduler: –ó–∞–ø—É—Å–∫–∞—é speedtest –¥–ª—è {len(hosts)} —Ö–æ—Å—Ç(–æ–≤)...")
    for h in hosts:
        host_name = h.get('host_name')
        if not host_name:
            continue
        try:
            logger.info(f"Scheduler: Speedtest –¥–ª—è '{host_name}' –∑–∞–ø—É—â–µ–Ω...")
            # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–∞–∂–¥—ã–π —Ö–æ—Å—Ç —Ç–∞–π–º–∞—É—Ç–æ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–Ω—É—Ç—å –Ω–∞–¥–æ–ª–≥–æ
            try:
                async with asyncio.timeout(180):
                    res = await speedtest_runner.run_both_for_host(host_name)
            except AttributeError:
                # –î–ª—è Python <3.11: fallback —á–µ—Ä–µ–∑ wait_for
                res = await asyncio.wait_for(speedtest_runner.run_both_for_host(host_name), timeout=180)
            ok = res.get('ok')
            err = res.get('error')
            if ok:
                logger.info(f"Scheduler: Speedtest –¥–ª—è '{host_name}' –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning(f"Scheduler: Speedtest –¥–ª—è '{host_name}' –∑–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–∞–º–∏: {err}")
        except asyncio.TimeoutError:
            logger.warning(f"Scheduler: –¢–∞–π–º–∞—É—Ç speedtest –¥–ª—è —Ö–æ—Å—Ç–∞ '{host_name}'")
        except Exception as e:
            logger.error(f"Scheduler: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è speedtest –¥–ª—è '{host_name}': {e}", exc_info=True)

async def _maybe_run_daily_backup(bot: Bot):
    global _last_backup_run_at
    now = datetime.now()
    # –°—á–∏—Ç–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤ –¥–Ω—è—Ö). 0 –∏–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∞–≤—Ç–æ–±—ç–∫–∞–ø –≤—ã–∫–ª—é—á–µ–Ω.
    try:
        s = database.get_setting("backup_interval_days") or "1"
        days = int(str(s).strip() or "1")
    except Exception:
        days = 1
    if days <= 0:
        return
    interval_seconds = max(1, days) * 24 * 3600
    if _last_backup_run_at and (now - _last_backup_run_at).total_seconds() < interval_seconds:
        return
    try:
        zip_path = backup_manager.create_backup_file()
        if zip_path and zip_path.exists():
            try:
                sent = await backup_manager.send_backup_to_admins(bot, zip_path)
                logger.info(f"Scheduler: –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø {zip_path.name}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent} –∞–¥–º.")
            except Exception as e:
                logger.error(f"Scheduler: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø: {e}")
            try:
                backup_manager.cleanup_old_backups(keep=7)
            except Exception:
                pass
        _last_backup_run_at = now
    except Exception as e:
        logger.error(f"Scheduler: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞: {e}", exc_info=True)